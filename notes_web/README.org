;; -*- mode: org; eval: (company-mode -1); mode:emmet; -*-
//HTML, CSS, JavaScript Basic
+ Robbins, J. (2007). Learning Web Design, A Beginner's Guide to (X)HTML, Style Sheets, and Web Graphics (3rd ed.). US: O'Reilly. (468 pages)

+ Flanagan, D. (2011). JavaScript, The Definitive Guide (6th ed.). US: O'Reilly. (1019 pages)

//C-j to trigger emmet.
================================================================================
* TODO 
  + classcast
* FAQ
** CGI standard
   //RFC3875
  
* Chapter 1, Basic/Misc
** J2EE
** MVC (Model, View, Controller)
   //DescriptionModel–view–controller is a software design pattern commonly used for developing user interfaces that divides the related program logic into three interconnected elements. 
+ *Model*
The central component of the pattern. It is the application's dynamic data structure, independent of the user interface.[5] It directly manages the data, logic and rules of the application.

+ *View*
Any representation of information such as a chart, diagram or table. Multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants.

+ *Controller*
Accepts input and converts it to commands for the model or view.[6]
In addition to dividing the application into these components, the model–view–controller design defines the interactions between them.[7]

The model is responsible for managing the data of the application. It receives user input from the controller.
The view means presentation of the model in a particular format.
The controller responds to the user input and performs interactions on the data model objects. The controller receives the input, optionally validates it and then passes the input to the model.
As with other software patterns, MVC expresses the "core of the solution" to a problem while allowing it to be adapted for each system.[8] Particular MVC designs can vary significantly from the traditional description here.[9]

+ *Service*
Between the controller and the model sometimes goes a layer which is called a service. It fetches data from the model and lets the controller use the fetched data. This layer allows to separate data storage (model), data fetching (service) and data manipulation (controller). Since this layer is not part of the original MVC concept, it is optional in most cases but can be useful for code management and reusability purposes in some cases.

** OSI Model, 7 layers
   |   | Layer        | Protocal data unit(PDU) | Function                                               |
   |---+--------------+-------------------------+--------------------------------------------------------|
   | 7 | Application  | Data                    | ----High-level APIs.                                   |
   | 6 | Presentation | Data                    | ----Translation of data between a networking service   |
   |   |              |                         | and an application; including character encoding,      |
   |   |              |                         | data compression and encryption/decryption.            |
   | 5 | Session      | Data                    | ----Managing communication sessions, i.e., continuous  |
   |   |              |                         | exchange of information in the form of multiple        |
   |   |              |                         | back-and-forth transmissions between two nodes.        |
   | 4 | Transport    | Segment, Datagram       | ----Reliable transmission of data segments between     |
   |   |              |                         | points on a network, including segmentation,           |
   |   |              |                         | acknowledgement and multiplexing.                      |
   |---+--------------+-------------------------+--------------------------------------------------------|
   | 3 | Network      | Packet                  | ----Structuring and managing a multi-node network,     |
   |   |              |                         | including addressing, routing and traffic control      |
   | 2 | Data Link    | Frame                   | ----Reliable transmission of data frames between two   |
   |   |              |                         | nodes connected by a physical layer.                   |
   | 1 | Physical     | Symbol                  | ----Transmission and reception of raw bit streams over |
   |   |              |                         | a physical medium.                                     |

   *Where is HTTP? Correlation with TCP/IP Model?*
    //At the application layer.
    //Defined in https://tools.ietf.org/html/rfc7230
    https://stackoverflow.com/questions/38596488/in-which-layer-is-http-in-the-osi-model

** HTTP/1.1 vs HTTP/2
   HTTP/2 began as the SPDY protocol, developed primarily at Google with the intention of reducing web page load latency by using techniques such as compression, multiplexing, and prioritization.
   + HTTP/1, TCP connection has to be break and remake multiple times on one page, whenever multiple GET methods are required.
   + HTTP/1.1 assume a TCP connect should be kept on unless directly told to close, however, it has a natural bottleneck: Since multiple data packets cannot pass each other when traveling to the same destination, there are situations in which a request at the head of the queue that cannot retrieve its required resource will block all the requests behind it. This is known as *head-of-line (HOL) blocking*, and is a significant problem with optimizing connection efficiency in HTTP/1.1. Adding separate, parallel TCP connections could alleviate this issue, but there are limits to the number of concurrent TCP connections possible between a client and server, and each new connection requires significant resources.
   + HTTP/2: the binary framing layer encodes requests/responses and cuts them up into smaller packets of information, greatly increasing the flexibility of data transfer.
   https://www.digitalocean.com/community/tutorials/http-1-1-vs-http-2-what-s-the-difference

   
** Design pitfalls
   + Provide alternatives: alternatives for non-text content.
   + Allow text to resize: specify the font size in relative measurement such as percentage or ems
   + Do not put text in graphics
   + Try to use accessiility feature when creating HTML tables and forms. i.e. use the features from HTML 4.01+
   + High contrast between foreground and background, should the image not load properly. 
   //Government Accessibility Requirement: Section 508
   + Design "above the fold": what would user see even when the site is folded, like a newspaper on the rack.
     //Names&Logos, primary messages, theme indications, navigations, crucial actions, key infos, Ads.
   + 16-bits monitors show rectangles while 24-bits monitors do not. The only solution is to make the pic transparent.

** URL *percent encoding*
   ナ -> "%e3%83%8a" == UTF-8 "\xE3\x83\x8A"

* Chapter 2, HTML
  [[./Cp2_BasicHTML01.html][Cp2_BasicHTML01]]

| <b>      | Bold         text |
| <strong> | Important    text |
| <i>      | Italic       text |
| <em>     | Emphasized   text |
| <mark>   | Marked       text |
| <small>  | Smaller      text |
| <del>    | Deleted      text |
| <ins>    | Inserted     text |
| <sub>    | Subscript    text |
| <sup>    | Superscript  text |
//emphasized text is typically displayed in italic, 
//strong text is typically displayed in bold.
//However a screen reader might read the two tags differently.

** HTML elements
***   *empty elements* is elements without a closing tag
    //in XHTML, empty elements need to be terminated.
   + <br> (<br /> in XHTML) -- single line break
   + <img> <img />
   + <hr> (<hr /> in XHTML) -- horizontal rule
     
   | Type                  | Element(s)                                       |
   |-----------------------+--------------------------------------------------|
   | Headings              | h1, h2, h3, h4, h5, h6                           |
   | Paragraphs            | p                                                |
   | Block (long) quotes   | blockquote                                       |
   | Preformatted text     | pre, code, kbd, var                              |
   | Various list elements | ol, ul: li(item); dl: dt(terms), dd(description) |
   | Horizontal rules      | hr                                               |
   | Hyper link            | a(Attributes: download, href, rel)               |
   | Address               | address                                          |
   | abbr                  | abbreviation                                     |
   | dfn                   | definition                                       |
   | q                     | Short (inline) quotations                        |
   [[./Cp2_dfn.html][Cp2_dfn]]

*** *inline text elements* (presentational Elements, NOT ALLOWED in strict DTD, use CSS instead)
   | Element | Description          | Alternative in CSS                              |
   |---------+----------------------+-------------------------------------------------|
   | b       | bold                 | font-weight: bold                               |
   | big     | larger               | font-size: larger                               |
   | center  | center               | text-align: center                              |
   | font    | size,color,typeface  | font-family, font-size, color                   |
   | i       | italic text          | font-style: italic                              |
   | small   | smaller              | font-size: smaller                              |
   | sub     | subscript            | font-size:smaller; vertical-align:sub           |
   | sup     | superscript          | font-size:smaller; vertical-align:sup           |
   | tt      | teletype;const-width | Use code, samp, kbd elements if appropriate,    |
   |         |                      | Otherwise use a specific or generic fixed-width |
   |         |                      | font. font-family: "Andale Mono", monospace;    |
   
*** Generic Elements (div and span)
    <div>Generic block-level element</div>
    <span>Generic inline element</span>
    
    With *element identifiers*: id and class attributes
    //id and class can be used with nearly all (X)HTML elements, 
    //In HTML 4.01, excepts:
    //base, basefont, head, html, meta, param, script, style and title.
    //In XHTML, the above elements are also included.
    <ul>
         <li>Joan: <span class="phone">999.8282</span></li>
         <li>Lisa: <span class="phone">888.4889</span></li>
    </ul>
    
*** Special Characters
    Characters outside the scope of standard ASCII code have to be escaped.
    + &copy;
    + &#169;
    [[./Cp2_BasicHTML02.html][Cp2_BasicHTML02]]
    | Charter | Description              | Name     | Number |
    |---------+--------------------------+----------+--------|
    |         | Nonbreaking space        | &nbsp;   | &#160  |
    | &       | Ampersand                | &amp;    | &#038  |
    | '       | Apostrophe               | &apos;   | &#039  |
    | <       | Less-than symbol         | &lt;     | &#060  |
    | >       | Greater-than symbol      | &gt;     | &#062  |
    |         | Copyright                | &copy;   | &#169  |
    |         | Registered trademark     | &reg;    | &#174  |
    | TM      | Trademark                | &trade;  | &#8482 |
    |         | British Pound            | &pound;  | &#163  |
    |         | Yen                      | &yen;    | &#165  |
    |         | Euro                     | &euro;   | &#8364 |
    |         | En-dash                  | &ndash;  | &#8211 |
    |         | Em-dash                  | &mdash;  | &#8212 |
    |         | Left curly single quote  | &lsquo;  | &#8216 |
    |         | Right curly single quote | &rsquo;  | &#8217 |
    |         | Left curly double quote  | &ldquo;  | &#8220 |
    |         | Right curly double quote | &rdquo;  | &#8221 |
    |         | Bullet                   | &bull;   | &#8226 |
    | ...     | Horizon ellipse          | &hellip; | &#8230 |
    
    // or, since &#leq (U+2264), escape it use &#x2264;

*** CDATA
    *(Unparsed) Character Data*
    #+begin_src html
        <script type="text/javascript"> 
        // <![CDATA[

        // ]]>
        </script> 
    #+end_src

*** ImageMap
    #+begin_src htmp
        <img src="" width="" height="" alt="" usemap="#imageMap" />
        //or ismap which indicates a server-side imagemap
        <map name="imageMap">
            <area shape="rect" coords="0,0,82,126" href="sun.htm" alt="Sun">
            <area shape="circle" coords="90,58,3" href="mercur.htm" alt="Mercury">
            <area shape="circle" coords="124,58,8" href="venus.htm" alt="Venus">
        </map>
    #+end_src

*** Basic Table Markup
    [[./Cp2_BasicHTML02.html][Cp2_BasicHTML02]]
    + column spans: <th colspan="2">TH</th>
    + row spans:
    + Cell padding: <table cellpadding="15"> ~p137
    + Cell spacing: <table cellspacing="15"> ~p137
      
** Forms
    <form action="/cgi-bin/basicForm01.pl" method="POST">
    [[./Cp2_BasicHTML02.html][Cp2_BasicHTML02]]
    *CGI (Common Gateway Interface)*
    
*** action 
    //provides the URL to the "action page" that will be used to process the form
    + .pl
    + .php
    + .asp (MS Active Server Pages)
    + .jsp (JavaServer Pages)
      
*** method
    
    
*** Entry Controls
    [[./Cp2_BasicHTML02.html][Cp2_BasicHTML02]]
    *Single Line completion*
    #+begin_src html
    <li><label for="form01"> TextEntry:</label> <input type="text" &name="nameInURL" value="defaultValue" size="25" maxlength="50" id="form01"/></li>
    #+end_src

    *password*
    #+begin_src html
    <input name="" type="password" value=""/>
    #+end_src

    *submit and reset*
    #+begin_src html
    <p><input &name="" type="submit" &value="BottonName"/>
    <input name="" type="reset" value="Reset"/></p>
    #+end_src
    
    *Pull-down menues*
    #+begin_src html
        <form action="cgi-bin/basicForm01.pl" method="post">
            <fieldset><label for="PullDown01">PullDownTest</label>
                <select name="pd01" id="PullDown01">
                    <option value="real">the fake might be real</option>
                    <option value="true">the falsy might be true</option>
                    <option >the words have no value</option>
                    <option value="">the story has, but in vain</option>
                </select>
            </fieldset>
            <input type="submit">
        </form>
    #+end_src
        
    *Scrolling menues*
    #+begin_src html
        <fieldset><label for="Scrolling02">Scrolling01</label>
            <select name="pd02" size="3" multiple="multiple" for="Scrolling01">
                <option value="real">the fake might be real</option>
                <option value="true">the falsy might be true</option>
                <option >the words have no value</option>
                <option value="">the story has, but in vain</option>
            </select>
        </fieldset>
    #+end_src
    *Grouping menues*
    #+begin_src html
        <optgroup label="groupName">
        </optgroup>
    #+end_src
    *File uploading*  use enctype to control encoding.
    #+begin_src html
        <form action="" method="post" enctype="multipart/form-data">
            <p><label for="fileUp01">Send a file: </label></p><br/>
            <input type="file" name="theFile" id="fileUp01"/></p>
        </form>
    #+end_src
    *Hidden controls*
    //can be used to achieve some special implementations 
** XHTML Basic
*** XHTML Syntax Convensions
   + Element and attribute names must be lowercase
   + All elements must be closed(terminated)
   + Empty elements must be terminated too
   + Attribute values must be in quotation marks
   + All attributes must have explicit attribute values (with no *attribute minimization*)
   + Elements must be nested properly
   + Always use character entities for special characters
   + Use *id* instead of *name* as an identifier
   + Scripts must be contained in a CDATA section
   + Follow additional nesting restrictions:
     - basic HTML nesting restrictions
     - a must not contain other a elements
     - pre must not contain the img, object, big, small, sub or sup elements
     - button must not contain the input, select textarea, label, button, form, fieldset, iframe or isindex elements
     - label must not contain other label elements
     - form must not contain other form elements
*** Namespace and language requirements
    *DTD Lists*
    //Check w3.org valid DTD list, copy and paste it.
    + HTML 5+: <!DOCTYPE HTML>
    + HTML 4.01 Strict: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">

    *XHTML*
    <html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"></html>
    //for more language code, check iso639-2/langcodes.html
    
    *Validate the document type*
    search for w3 validate or use plugin

* Chapter 3, CSS
  
** Reference:
   + CSS levels
     [[https://www.w3.org/TR/CSS1/][CSS Levels W3Org]]
   + Designs
     //CSS Zen Garden
   + Diana Smith
     
** Some Basics:
*** importance level, Overriding
    + !important is highest
    + a more specific selector is with higher privilage.
    + See the following, *** A Few More Selector Types. 
   //reader style sheets may override the default ones
   
   
*** Units of measurement
**** Font-size
    + Absolute units:
      - pt (1 points= 1/72 inch in CSS 2.1)
      - pc (1 pica = 12 points)
      - mm millimeters
      - cm centimeters
      - inches
    + Relative units: (em and % are recommended)
      - em (a unit of measurement equal to the current height of the font in nominal points or inches)
      - ex (approximately the height of a lowercase "x")
      - px (pixel, considered relative because it varies with display resolution)
      - % (percentage values)
    + Keywords: font-size: medium, xx-small, ..., xx-large
      //Larger and smaller.
      //The keywords shift size of the text relative to the *parent element*.
      //The keywords protect agains illegible type (e.g. smaller than 9 pixels)
      //However also imprecise and unpredictable
      
      Examples:
      #+begin_src css
        body { font-size: small; }
        h1 { font-size: 1.5em; } //Relative to its parent element (body)
      #+end_src
      
**** Font-weight
     *normal*, *bold*, bolder, lighter, 100, 200, ..., 900, inherit
     
**** Font-style
     normal, italic, *oblique*, inherit
     //The italic calls a separate font, while oblique takes the normal font design and slant it.

**** Font-variant
     normal, small-caps, inherit
**** Line-height 
     //the minimum line height 
     p { line-height: 2em; }
**** Indents
     p#1 {text-indent: 2em; }
**** text-align 
     left, right, center, justify, inherit
**** Decorations
     none, underline, overline, line-through, blink, inherit
     p { text-decoration: underline;}

*** A Few More Selector Types
    + Descendant selectors
      - li em {}
      - h1 em, h2 em {}
      - div.row2>*
    + ID selectors
      - #catalog1234 {}
      - li#catalog1234 {}
      - #sidebar li { margin-left: 10px;}
    + Class selectors
      - p.special {}
      - .special {}
      - *.special {}
    + Universal Selector
      - * {}
      - #intro * {}
        
*** Specificity, i.e. The Priority
**** The calculation
     //Start at 0, add 1000 for style attribute, add 100 for each ID, add 10 for each attribute, class or pseudo-class, add 1 for each element name or pseudo-element.
     A: h1
     B: #content h1
     C: <div id="content"><h1 style="color: #ffffff"</h1></div> 
     //The specificity of A is 1 (one element)
     //The specificity of B is 101 (one ID reference and one element)
     //The specificity of C is 1000 (inline styling)
**** If equal, the latest rule counts
**** ID selectors have a higher specificity than attribute selectors 
    div#a {background-color: green;}
    #a {background-color: yellow;}
    div[id=a] {background-color: blue;}
    //Result: green
**** Contextual selectors are more specific than a single element selector
    //i.e. the inline <style>#content h1{}</style> weight the most.
    //But some minor bug exist, e.g. the priority does not take effect until server reload.
**** A class selector beats any number of element selectors 
    //a class selector such as .intro beats h1, p, div, etc:
    .intro {background-color: yellow;}
    h1 {background-color: red;}
**** The universal selector and inherited values have a specificity of 0 
    //*, body * and similar have a zero specificity. Inherited values also have a specificity of 0.
    
*** RGB color
    #RRGGBB
    
*** background
    #+begin_src css
    body{
        background-image: url(/img/bgPic01Gears.png);
        background-size: 30em;
        background-repeat: repeat-x repeat-y;
        background-color: khaki;
        background-attachment: fixed;
    }
    //or use 
    background{ background-colr background-image ...}
    #+end_src
    
*** Import css
    #+begin_src html
    <link rel="stylesheet" herf="" type="text/css" />
    ----------------------------------------
    <style type="text/css">
        @import url("stylesheet.css");
        p{ font-face: Verdana;}
    </style>
    //The later one can be used to import modular css
    #+end_src
    
    
** The BOX
   //Padding, Borders and Margins
   1. content area (height, length)
   2. inner edges
   3. padding (one value) or (t/b r/l) or (t r/l b) or (top right bottom left);
   4. border (style(none, dotted, dashed, solid, double, groove, ridge, inset, outset), width)
   5. margin
   6. outer edge
   //From inside to outside
   
*** 5.margin
    1. the margin collapse, the bigger value of the adjacent applies to the two.
    2. negative margins push elements together.
       #+begin_src css
       body {
           margin-left:12%;
           margin-right:12%;
           font: 76% Verdana, sans-serif;
           width: device-width;
       }
       div.row1 {
           margin: 3em 0; /* T/B L/R */
       }
       #+end_src
       
**** display
     .class { display=none/inline/block/inline-block/}
     //visibility: hidden makes the element invisible, but holds the space
     //display:none removes the spaces.
     
*** Pseudo-elements (疑似要素)     
    + p::first-line { color ::#ff0000; font-variant: small-caps; }
    + p::first-letter {}
    + h1::before{ content: url(pic.png); }
    + h1::after { content: url(pic.gif); }
    + ::selection { color: red; background: yellow; }

*** Pseudo-classes (疑似クラス)
    + a:link
    + a:visited
    + a:hover  //MUST come after a:link and a:visited in the CSS definition in order to be effective.
    + a:active //MUST come after a:hover in the CSS definition in order to be effective.
    + input:focus //input:focus selects the <input> element that has focus
    + element:first-child
    + :lang
    + :nth-child(2n+1)
    + :target
    + input:valid
    + input:invalid <input type="email">


** Floating
   #+begin_src css
   float {left|right|none|inherit}
   //parent div as class clearfix
   .clearfix::after{
       content: "";
       display: block;
       clear: both;
    }
   #+end_src
    
*** More Floating:
   #+begin_src html
    <p><span class="disclaimer">Disclaimer: content</span>text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text</p>
   #+end_src
   #+begin_src css
    span.disclaimer {
        float: right;
        margin: 1.5 em;
        width: 10em;
        color: #FFF;
        background-color: #9D080D;
        padding: 0.5em;
    }
    p {
        padding: 1.2em;
        background-color: #FFF799;
        border: 2px solid #6C4788;
    }
   #+end_src
    
    //Some Rules of Thumb:
      + Always provide a width for floated text elements.
      + Floated inline elements behave as block elements.
      + Elements do not float higher than their reference in the source.

*** Positioning
    + static (default, not affected by the top, bottom, left, right properties)
    + *fixed* (to the *screen*)
    + relative (to the reference point)
    + absolute (in the last parent that specified relative, absolute or fixed) 
      em { position: absolute; width: 10em; top: 2em; left: 0em; }
      //Element shows on the top left corner of the *document or last parent element*.
     
    //Fixed fix to the screen/window.
    //Absolute requires a parent with none default position specified.
   
*** z-index, Stacking order
    {z-index: 10;} is on top of {z-index 1;}
    
   
** Page Layout with CSS 
   
*** Liquid Layout
    //specify width in percentage values, or not specify at all.
    div#main { width: 70%; margin-right: 5% float: left; background: yellow;}
    div#extras { width: 25%; float: left; background: orange;}
    
*** Fixed Layout
    //specify a fixed width, use the extra for non-critical information;
    #wrapper {*width: 750px*; position: absolute; margin-left: auto; margin-right: auto; border: 1px solid black; padding: 0px;} /*parent element*/
    #extras {position: absolute; top:0px; left:0px; *width: 200px*; background: orange;}
    #main {*margin-left: 225px*; background-color: yellow; }

*** Elastic Layouts
    //Disadvantage: image cannot rescale along with the text.
    text size: 76%;
    page: 40em;
    
*** Zoom Layout ~p317
    //Good in Zooming. Expecially good for low-vision users.
    + A single column layout.
    + Extremely large type, set in em.
    + High-contrast text and background.
    + Simplified navigation that appears at the beginning of the document.
    + Some visual elements such as color and simple graphics to create an experience consistent with that of the site's normal presentation.
      //Expert reference: Joe Clark.
      
    
    
** Style Properties for Tables
*** borders
    + border-collapase: separate|collapse;
    //If separate,
         + border-spacing: 15px(width) 3px(height);
           
    + empty-cells: show|hide
      
*** Changing List Bullets and Numbers:
    + list-style-type: 
      //none|disc|circle|square|decimal|decimal-leading-zero|lower-alpha|upper-alpha|
      //lower-latin|upper-latin|lower-roman|upper-roman|lower-greek
    + list-style-position
      //inside|outside
    + list-style-image:url();
      
*** Use Lists for Navigation
    #+begin_src html
    <ul id="nav">
    <li><a href="#">title1</a></li>
    <li><a href="#">title2</a></li>
    <li><a href="#">title3</a></li>
    </ul>
    #+end_src

**** Inline list items 
    #+begin_src css
     ul#nav {
         list-style-type: none;
         margin: 0px;
         padding: 0px;
     }
     //Method1:
     ul#nav li {
         display: inline;
     }
     ul#nav li a { /*select only links in the "nav" list*/
         padding: 5px 20px;
         margin: 0px 2px;
         border: 1px solid #FC6A08;
         background-color: #FCA908;
         text-decoration: none;
         text-align: center;
         color: black;
     }

     //Method2:
     ul#nav li {
         float: left;
         margin: 0 2px;
         padding: 0;
     }
     ul#nav li a { /*select only links in the "nav" list*/
         display: block;
         width: 100px;
         height: 28px;
         line-height: 28px;
         border: 1px solid #FC6A08;
         background-color: #FCA908;
         text-transform: uppercase;
         text-decoration: none;
         text-align: center;
         color: black;
     }
    #+end_src
     
** Other keywords:
   + progressive image loading


** Summary and suggestions:
   + Font: Verdana, for readbility
   + "@" at rules, or the *conditional group rules*
     #+begin_src css
         @media print{
             #nav { display: none; }
         }
     #+end_src
     //for *@Keyframes*, check [[https://www.w3.org/TR/css-animations-1/][CSS-Animations-1]]

*** The art of box
   + border-radius: lt-h, rt-h, rb-h, lb-h / lt-v, rt-v, rb-v, lb-v;
     //[[https://stackoverflow.com/questions/38493828/border-radius-with-division][stackoverflow, Border-radius with division]]
   + box-shadow: 6px -11px 20px 1px red, -15px -15px 5px-10px blue, insert 5px 5px 35px 10px green;
   + transform: rotate(-45deg)
     //transform: scale(0.7, 1.3)
     //transform: skew(25deg, 30deg)
     //transform: perspective(10px) rotateY(5deg)
   + linear-gradient / radial-gradient
     //background-image: linear-gradient(0deg, blue, transparent 60%),
     //radial-gradient(circle at 70% 30%, purple, transparent 40%);
   + overflow: hidden;
    
* Chapter 4, JavaScript
//JavaScript Basic, Client-Side JavaScript.

** Some Basics
*** Naming Convensions
   + Must begin with a letter, dollar sign or an underscore. Must NOT start with a number.
   + Must NOT use dash or period in a variable name.
   + Better NOT to use the *reserved words*.
   + All variales are case sensitive.
   + Meaningful variable names.
   + use Camel Case.
   
*** Type Checking
   //TODO
     
*** arrays
    #+begin_src javascript
   var colors;
   colors = [`white`, `black`, `custom`];
   //Usage:
   console.log(colors[0]);
    #+end_src
   
*** Handy Functions
    + window.XMLHttpRequest

      
** Chapter 02, Lexical Structure
*** Characters
   + Unicode char set, version 2.1 or later.
   + Case Sensitive (while HTML is case-nonsensitive)
   + Ignore spaces between tokens in programs. Or most of the time also ignore line breaks.
     //The following characters are recognized as space: 
     //space(\u0020), tab(\u0009), vertical tab(\u000B), form feed(\u000C), nonbreaking space(\u00A0), byte order mark(\uFEFF), and any characters in Unicode category Zs.
     //Some other characters as line terminators:
   + "café" === "caf\u00e9" //True
   + However, JavaScript will not try to normalize representations. In case not normalized, \u0301 and \u00E9, though presenting the same character, would be treat as not equal by JavaScript.

*** Literals
    + 12
    + 1.2
    + "hello world"   //A string of text
    + 'hi'            //Another string
    + true            //A Boolean value
    + /javascript/gi  //A regex literal
    + null            //Absence of an object
    + { x:1, y:2 }    //An object initializer
    + [1, 2, 3, 4, 5] //An array initializer

*** Identifers and Reserved Words
    //A legal *identifier* start with a letter, an underscore(_), or a dollar sign($), or a dollar sign($). Subsequent characters can be letters, digits, underscores, or dollar signs.
    
*** Optional Semicolons
    //Two Exceptions:
    #+begin_src javascript
    //the linebreak after return, break, continue always interpreted as semicolon.
    return
    true;
    //is always parsed as:
    return; true;

    x
    ++
    y
    //is always parsed as:
    x; ++y;
    #+end_src

    
** Chapter 03, Types, Values and Variables
   Object Types:
   + primitive (numbers, strings of text, booleans, *null* and *undefined*)
   + object 
   + function
     
*** Numeric literal ~p34
    //No distinguish between int and float point
    //When overflow, returns *Infinity* or *-Infinity*
    //When underflow, returns 0 or *-0* if src is negative.
    //Divison by zero, divide infinity by infinity, root a negative number, returns *NaN*, i.e. Not a Number.
    *Special:*
      + 0 === -0             //true.
      + 1/zero === 1/negz    //false, since infinity does not equal to -infinity.

**** Binary Folating-Point and Rounding Errors
     Follows the *IEEE-754 floating-point representation*
     //which can exactly represent 1/2, 1/8, 1/1024, .etc
     //however cannot persicely represent decimal fractions such as 0.1 
     .3 - .2 == .2 - .1 //false
     
*** Regex
    //RegExp();
    //Adopted the syntax of Perl

*** Immutable variables
    
*** Default type convension
    + empty string is false;
    + 0, -0, NaN is false;
    + Infinity, -Infinity or number(?) is true;
    + ----------------------------------------
    + null, undefined is false;
    + object is true;
    + ----------------------------------------
    + null==undefined
    + "0"==0
    + 0==false
    + "0"==false


** Some Tricks
*** simple input check
    #+begin_src javascript
        <input type="submit" value="submit" onclick="return checkForm();"/>
        <script>
            function checkForm(){}
        </script>
    #+end_src
    
* Section 5, JSP
** KeyWords
*** JSP Implicit Objects   
    + request
    + response
    + out
    + session
      //the *HttpSession* object associate with the request.
    + application
      //the *ServletContext* object associated with the application context.
    + config
      //the *ServletConfig* object associated with the page.

      
*** EL (Expression Language)
    *EL Implicit Objects*
    + pageScope
    + requestScope
    + sessionScope
    + applicationScope
    + pageContext
    + param
    + paramValues
    + header
    + headerValues
    + initParam
    + cookie
    
*** JSTL (JavaServer Pages Standard Tag Library)
    + <c:forEach>
    + <j>
    + <j>

      
** Some Basic
   
*** Import
    #+begin_src jsp
    <%@ page language="java" contentType="text/html; charset=UTF-8">
    <%@ page import="java.util.*">
    <%@ page import="java.io.*, ccdebug.*">
    #+end_src
    
* Section 10, the Grand Picture
** the evolution of the Web model 
   MVC - Service - DAO
   //Maybe: Servlet == Controller, then it calls the applications on the server, which is the service layer. 
   //How does servlet intereact with the application?
   //Who handles the View?
   //Who handles the Data?

   For example, The data provider provide a new API for a specific kend of users(e.g. IOS user).
   Then the DAO may be built on a specific platform.
   
** MVC
   + Controller
     //e.g. Servlet, Action
   + Entity
     //Java beans
     //VO(View Object) BO(Business Object) PO
   + Service 
     //Interface and implementation
   + DAO

* Section 20, BootStrap
** Basic
   #+begin_src html
   //12 columns, unlimited rows.
   //class= *"col-sizeCode-numberOfCols"*
   <div class="row">
       <div class="col-md-6">
           <h1>1</h1>
       </div>
       <div class="col-md-6">
           <h1>2</h1>
           <button type="button" class="btn btn-primary">Primary</button>
       </div>
   </div>
   #+end_src
   
* Section 30, HTML5 Canvas
  
** Canvas Objects:
   + Rectangles
   + Lines
   + Arcs/Circles
   + Bezier Curves
   + Images
   + Text
* Section 31, Redux
** functional programming
   //e.g.
   + Haskell
   //function is treated as an object.
   #+begin_src javascript
   function sayHello(){return function(){
       return "Hello";
   }} 
   let fn = sayHello();
   //function is high order function if it takes function as input.
   function(f){
       return f()(); 
   }
   #+end_src

** *lodash* (library) lodash/fp *compose* and *pipe*
   //utility library for functional programming
   #+begin_src  javascript
       const trim = str => str.trim();
       const wrap = (type, str) => `<${type}>${str}</${type}>`
       const toLowerCase = str => str.toLowerCase();
       transform = lodash.compose(wrapInDiv, toLowerCase, trim);
       transform = lodash.pipe(trim, toLowerCase, wrapInDiv);
       console.log(transform(input));
   #+end_src
   #+begin_src javascript
   function add1(a){
       return function(b){
           return a+b;
   }}
   const add2 = a => b => a + b;
   #+end_src

   *Hence:*
   #+begin_src javascript
       //we rewrite the following function:
       //const wrap = (type, str) => `<${type}>${str}</${type}>`
       const wrap = type => str => `<${type}>${str}</${type}>`
       transform = lodash.pipe(trim, toLowerCase, wrap("div"));
       //this gives: 
       //<div>javascript</div>
   #+end_src
   
** pure function
   //a reducer should be a pure function
   
** immutable
   //merits:
   + faster change detection
     //react can quickly tell if a immutable object changed quickly
   + concurrency
   //costs:
   + performance
   + memory overhead
     //structural sharing is offered by some libraries

   *data in redux, or functional programming in general, should not be mutated*
*** update an object in redux
    #+begin_src javascript
        const person = { name: "John" };
        //! person.name //should not do this directly, instead,

        //method1
        const updated = Object.assign({}, person, { name: "Bob", age: 30 })
        console.log(updated); //{ name: "Bob", age: 30 }
        //method2, spread syntax
        const updated = {... person, name: "Bob" }
    #+end_src
    
** redux basic
   + the redux *store*
   #+begin_src javascript
       // a store
       {
           categories:[],
           products:[],
           cart:{},
           user:{}
       }
       // we do not mutate a store. Hence, to update the store,
       // we write the following function: 
       //// action is an Event. and the reducer is an EventHandler.
       //// except that they do not mutate a state.
       function reducer(aSpecificSliceOfTheStore, action) {
           const updated = { ...aSpecificSliceOfTheStore };
       }
   #+end_src
     - Action --(dispatch)--> Store --(call)--> Reducer --(returnTheState)--> Store
     - Then the store could update its state  
** an example redux application 
   // a bug tracker
*** Design the store
   #+begin_src javascript
   // the store:
   {
       bugs: [
           {
               id: 1,
               description: "",
               resolved: false
           },
       ],
       currentUser: {}
   }
   // the store has two slices, the bugs, and the currentUser.
   #+end_src
   // in the example we *only use the bugs list* as a store.

*** Define the actions
    + add a bug
    #+begin_src javascript
        // an redux action object:
        // a type is necessary for an redux action object.
        // however any type that is serializable could be assigned to it. 
        // the "payload" structure is not necessary, but originated from flux.
        // the payload contains the mininum info we need for the action.
        {
            type: "ADD_BUG",
            // description: "...",
            payload: {
                description: "..."
            }
        }
    #+end_src
    + mark as resolved
    + delete a bug
    #+begin_src javascript
        {
            type: "REMOVE_BUG",
            payload: {
                id: 1
            }
        }
    #+end_src

*** Create a reducer
    //write *pure function* that mutate or depend on no global state.
    #+begin_src javascript
        // reducer.js
        let lastId = 0;
        // state = [] set the default param, to initialize the state 
        // when it is undefined.
        export default function reducer(state = [], action) {
            switch (action.type) {
                case "ADD_BUG":
                    return [
                        ...state,
                        {
                            id: ++lastId,
                            description: action.payload.description,
                            resolved: false
                        }
                    ];
                    // break; // unreachable code
                case "REMOVE_BUG":
                    return state.filter(bug => bug.id !== action.payload.id);
                default:
                    return state;
            }
        }
    #+end_src

*** Set Up the store (based on the reducer)
    #+begin_src javascript
        // store.js
        import { createStore } from 'redux';
        import reducer from './reducer';

        const store = createStore(reducer);
        export default store;
    #+end_src

    #+begin_src javascript
    // index.js
    import store from './store';
    import React from 'react';

    class reduxTestPage extends React.Component {
        componentDidMount() {
            console.log(store); 
            // {dispatch: f, subscribe: f, getState: f, replaceReducer: f, Symbol(observable): f}

            // UI components subscribe to the store, to update on state change
            // an corresponding unsubscribe function will be returned.
            // the unsubscribe need to be called to prevent memory leak.
            const unsubscribe = store.subscribe(() => {
                console.log("Changed", store.getState());
            })

            // add a bug
            store.dispatch({
                type: "ADD_BUG",
                payload: {
                    description: "Bug1"
                }
            });

            unsubscribe();

            // remove a bug
            store.dispatch({
                type: "REMOVE_BUG",
                payload: {
                    id: 1
                }
            });
        }

        render() {
            return (
                <div>
                    "check the console";
                </div>
            )
        }
    }
    export default reduxTestPage;
    #+end_src

*** a better practice
    #+begin_src javascript
        
    #+end_src

* Section 35, JavaScript trivia
** array
   + []
** object
   + {}
     
** execution context
*** phase1: context creation -- syntax parser (the so called hoist, etc.)
    + variable and function are malloced.
      #+begin_src javascript
      f();
      a; //undefined
      function f(){ console.log('..') };
      var a = 1;
      #+end_src

*** phase2: code execution
    + single threaded synchronous execution
      
**** the execution stack and the event queue
     + when the execution stack is empty, if ecent queue is not empty, calls the corresponding event handler.

** primitive types
   + undefined
   + boolean
   + number
   + string
     #+begin_src javascript
     String("s") !== new String("s")
     new String("s1")[0] //s
     new String("s1")[1] //1
     #+end_src
   + bigInt
   + symbol

   + null (structural root primitive): ~typeof null === "object"~

** Structural Types
   + Object
     // ~typeof instance === "object"~. Special non-data but Structural type for any constructed object instance also used as data structures: new Object, new Array, new Map, new Set, new WeakMap, new WeakSet, new Date and almost everything made with new keyword;

   + Function
     // a non-data structure, though it also answers for typeof operator: ~typeof instance === "function"~. This is merely a special shorthand for Functions, though every Function constructor is derived from Object constructor.

** coercion, operator precedence, associativity(left-to-right, right-to-left)
   + [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence][operator precedence and associativity]]
   #+begin_src javascript
   3 < 2 < 1 //true
   #+end_src
   
** Function Constructor
   + The ~Function constructor~ creates a new ~Function~ object. 
     #+begin_src javascript
     const sum = new Function('a', 'b', 'return a + b');
     console.log(sum(2, 6)); // 8
     #+end_src
     // each var name must be a string

** Object.create, Object.setPrototypeOf
   + Object.create(proto, [propertiesObject])
   + Object.setPrototypeOf(ocn, Object.prototype)

** *this*
   //[[https://www.youtube.com/watch?v=zE9iro4r918][Understanding the "this" keyword, call, apply, and bind in JavaScript]]
   + Implicit Binding
     #+begin_src javascript
     var f = function(name){
         return{
             name: name,
             sayName: function(){
                 console.log(this.name)
             },
             mother: {
                 name: 'Stacey',
                 sayName: function(){
                     console.log(this.name)
                 }
             }
         };
     };
     f("aName").sayName(); // aName
     // this is implicitly bind to the variable that invoked it (when?)
     #+end_src

   + Explicit Binding *call(), bind(), apply()* call(thisArg, params...), apply(thisArg, params[])
     #+begin_src javascript
     var sayName = function(param1, param2){
         console.log(this.name + " " + param1 + " " + param2);
     }
     
     var stacey = {
         name: 'Stacey',
     }

     // Function.prototype.call(&this, &params);
     // if this is not explicitly given, implicit bind: this === globalThis === window 
     sayName.call(stacey, "aParamStr"); // Stacey aParamStr undefined
     // call(this, args...);
     sayName.apply(stacey, ["a", "b"]); // Stacey aParamStr undefined
     // apply(this, args[]); 
     // hence, sayName.apply([stacey, "a"]); gives: undefined undefined undefined

     // Function.prototype.bind(args...), bind the given arguments to the function.
     var newFn = sayName.bind(stacey, "aParamStr");
     newFn(); // Stacey aParamStr undefined
     newFn("hi") // Stacey aParamStr hi 
     #+end_src

   + new Binding
     #+begin_src javascript
     var Animal = function(name, color){
         // this = {}
         this.name = name;
         this.color = color;
     };

     var zebra = new Animal('Zorro', 'black and white'); // this === zebra
     typeof Animal; // "function"
     typeof zebra; // "object"
     #+end_src
   + window Binding
     #+begin_src javascript
     var sayName = function(param1, param2){
         console.log(this.name + " " + param1 + " " + param2);
     }

     this.name = 1; // window.name = 1;
     
     sayName(); // sayName.call() // 1 undefined undefined
     #+end_src

** *object creation* 
   #+begin_src javascript
       Animal.prototype.eat = function (){console.log("eating")};
       animal = Object.create(Animal.prototype);
       animal = new Animal(); // calls 
   #+end_src

** backticks
   const wrap = (type, str) => `<${type}>${str}</${type}>`
** the spread syntax(...)
   //used to iterate or merge arrays or objects
   + spread syntax is not an operator, because it do not has a stand-alone version. i.e. let arr1 = ...Array(2) dose not compile;
   + the spread syntax is equivalent to Object.assign;
   + for arrays
     #+begin_src javascript
         let arr1 = [0, 1, 2];
         let arr2 = [3, 4, 5];
         arr3 = [...arr2, ...arr1]; //[ 3, 4, 5, 0, 1, 2 ]
     #+end_src
   + for objects, merge the given, attributes of the later overwrite those of the former
     #+begin_src javascript
         let person = { name: "John", age: 25 };
         let job = { title: "boss", age: 26 };
         let employee = { ...person, ...job }; //{ name: 'John', age: 26, title: 'boss' }
     #+end_src
     - However, note that this would only *shallow copy* an object. i.e., update of an copiedObj.attr.attr might change the originalObj.attr.attr, to avoid this, do the deep copy:
     #+begin_src javascript
         let person = { name: "John", age: 25, address:{ city: "NY" } };
         let job = { title: "boss", age: 26 };
         let employee = { ...person, address:{ ...person.address, city: "TKY"}, ...job };
     #+end_src
     - to simply this process, libraries for immutability are introduced:
       + immutable (facebook) offers immutable data structure
         #+begin_src javascript
             import { Map } from 'immutable';
             let book = Map({ title: "X" });
             function publish(book){
                 return book.set("isPublished", true); 
                 // this will not modify the book, since that is immutable
             }
             book = publish(book);
             console.log(book.toJS());
             //Hard to work with other libraries.
         #+end_src
       + immer (mobX) offers way to work with plain javascript objects
       + mori
         
** *immer*
   #+begin_src javascript
       import { produce } from 'immer'; 
       let book = { title: "X" };
       function publish(book){
           return produce(book, draftBook => {
               draftBook.isPublished = true;
           });
           // the draftBook is an proxy that records all the change made to the book object.
           // while the book hold unchanged.
       }
       let updatedBook = publish(book); // new objected with updated info
    #+end_src

** defer/async/<default>
   + defer
     //<script src="demo_defer.js" defer></script>
   + async
     //<script src="demo_defer.js" async></script>
     - If async is present: The script is executed asynchronously with the rest of the page (the script will be executed *while* the page continues the parsing)
     - If async is not present and defer is present: The script is executed when the page has finished parsing
     - If neither async or defer is present: The script is fetched and executed immediately, *before* the browser continues parsing the page
       
** async/await, functional programming     
   + example 1, basic usage:
     #+begin_src javascript
     async function hello() { return "Hello" };

     hello().then(value => console.log(value)); // 1
     hello().then(console.dir); // 2
     try {
         let res = await hello(); 
         console.dir(res); // 3
     } catch(e) {
         console.dir(e)
     }
     #+end_src
   + example 2, if async function throws an error, the value is parsed as the "rejected": 
     #+begin_src javascript
     async function rejectSample() {
         throw new Error('reject!!');
     }
     rejectSample().catch(console.dir); // 'reject!!'
     #+end_src

*** await functions are not executed in parallel naturally
    + but with Promise.all it might be:
      - note that in the second case, ~console.log('resolving fb')~ is called first, proves that Promise.all(Promises[]) resolve the Promises asynchronously, while the first case is an edge case, showing that if any Promises returns at a same time, they follows the original order.
    #+begin_src javascript
    // Promise.all returns an array of resolved value in order.
    const fa = (v, ms) => new Promise((resolve) => setTimeout(() =>{ 
        console.log('resolving fa');
        resolve(v);
    }, ms));
    const fb = (v, ms) => new Promise((resolve) => setTimeout(() =>{ 
        console.log('resolving fb');
        resolve(v);
    }, ms));
    Promise.all([fa('fa', 50), fb('fb', 50)]).then(console.log).catch(console.log);
    Promise.all([fa('fa', 50), fb('fb', 25)]).then(console.log).catch(console.log);
    #+end_src

    + also, the Promise.all fail fast:
    #+begin_src javascript
    const happy = (v, ms) => new Promise((resolve) => setTimeout(() =>{ 
        console.log('resolving happy');
        resolve(v);
    },  ms))
    const sad = (v, ms) => new Promise((_, reject) => setTimeout(() => { 
        console.log('resolving sad');
        reject(v);
    }, ms))

    Promise.all([happy('happy', 100), sad('sad', 50)])
    .then(console.log).catch(console.log) // resolving sad\n, 'sad'\n, resolving happy\n
    #+end_src
    
    + Promise.all with Promise<void>
      #+begin_src javascript
    const fa = (v, ms) => new Promise((resolve) => setTimeout(() =>{ 
        console.log('resolving fa');
        resolve(v);
    }, ms));
    function foo(){}; 
    // console.log(foo()) // undefined
    async function bar(){ console.log('resolving bar')}; 
    // bar().then(res => console.log(res)) // undefined
    const fc = (v, ms) => new Promise((resolve, _reject) => setTimeout(() =>{ 
       console.log('resolving fc');
       resolve();
    }, ms));

    Promise.all([fc('fc', 100), fa('fa', 50), bar()]).then(console.log).catch(console.log);
    
    // [undefined, "fa", undefined]
      #+end_src
*** without promise.all, await execute synchronously
    #+begin_src javascript
    const fa = (v, ms) => new Promise((resolve) => setTimeout(() =>{ 
        console.log('resolving fa');
        resolve(v);
    }, ms));
    const fb = (v, ms) => new Promise((resolve) => setTimeout(() =>{ 
        console.log('resolving fb');
        resolve(v);
    }, ms));

    (async () => {
        await fa('fa', 50);
        await fb('fb', 25);
    })().then(console.log);
    // functions invoked in synchronouse order
    // resolving fa
    // resolving fb
    // undefined
    #+end_src
** ? ways to create memory leak

** TODO when to use singleton.
   + i.e., in Vue reactive api, is it possible that an concurrency might occur, in a client side or server side (nuxt) server?

** sparse array, Array(2) vs [undefined, undefined] 
   + array memory is sparsed
   + Array(2).map() may ignore non-existing elements by default.
   + while e.g. [...Array(2)].map() will not ignore any undefined element.

** prototype
*** the PoC code for the Summary
   + [[https://stackoverflow.com/questions/650764/how-does-proto-differ-from-constructor-prototype][how does proto differ from constructor prototype]]
   + the PoC:
   #+begin_src javascript
    Object.O1='';
    Object.prototype.Op1='';

    Function.F1 = '';
    Function.prototype.Fp1 = '';

    Cat = function(){};
    Cat.C1 = '';
    Cat.prototype.Cp1 = '';

    mycat = new Cat();
    o = {};

    console.dir(mycat);
    console.dir(o);
   #+end_src

*** Summary
    
**** how does ~new~ work on Function
     // When the code new Foo(...) is executed, the following things happen:
     1. A new object is created, inheriting from Foo.prototype.
     2. The constructor function Foo is called with the specified arguments, and with this bound to the newly created object. new Foo is equivalent to new Foo(), i.e. if no argument list is specified, Foo is called without arguments.
     3. The object (not null, false, 3.1415 or other primitive types) returned by the constructor function becomes the result of the whole new expression. If the constructor function doesn't explicitly return an object, the object created in step 1 is used instead.(Normally constructors don't return a value, but they can choose to do so if they want to override the normal object creation process.)
    
     + the PoC code: 
       #+begin_src javascript
       // Case1, function has no return value; 
       // A new object is created, f0n.__proto__ === f0.prototype
       let f0 = function() {};
       f0.prototype.f0p = "f0p";
       
       let f0n = new f0();
       console.log(f0n) // f0n is a new Object, inheriting from f0.prototype
       console.log(f0n.__proto__.f0p); // "f0p"
       #+end_src

       #+begin_src javascript
       // Case3, function has an explicit return value, the value is an object
       // (not null, false, 3.1415 or other primitive types); 
       // the return value becomes the new object value.
       let f3 = function() {
         return {
           "f3": "f3"
         }
       };
       f3.prototype.f3p = "f3p";
       
       let f3n = new f3();
       console.log(f3n) // {f3: "f3"}, f3n is an Object, the return value of its constructor function `f3`
       console.log(f3n.__proto__.f3p); // undefined
       #+end_src

       #+begin_src javascript
       // Case4 (or Case1 again), function has an **implicit** return value.
       let f4 = function(a) {
         return (a + a)
       };
       f4.prototype.f4p = "f4p";
       
       let f4n = new f4();
       console.log(f4n.__proto__.f4p); // "f4p"
       #+end_src
     + in case we want an Callable (a function), follow the Case3, ~let f5 = function() { return function () {}; };~, then the ~f5~ will be an function thus callable.
       
**** function:
     #+begin_quote
     (typeof Function === "function") && (typeof Function.prototype === "function") //true
     Function.__proto__.constructor.F1 <=== Function.F1;
     Function.__proto__.__proto__.Op1 <=== Object.prototype.Op1;
     Function.prototype.__proto__.constructor.O1 <=== Object.O1;
     Function.prototype.__proto__.Op1 <=== Object.prototype.Op1;
     #+end_quote
     #+begin_quote
     (typeof Object === "function") && (typeof Object.prototype === "object") //true
     Object.__proto__.constructor.Fp1 <=== Function.Fp1;
     Object.__proto__.Fp1 <=== Function.prototype.Fp1;
     Object.prototype.__proto__ <=== *null*
     #+end_quote
     #+begin_quote
     (typeof o === "object") //true
     o.__proto__.Op1 <=== Object.prototype.Op1;
     #+end_quote
     #+begin_quote
     ~Cat = function() {}~
     Cat.prototype.constructor === Cat; // true
     //See: [[function has a prototype property]], auto added attribute on definition of a function.
     //What if this is modified?
     Cat.__proto__.constructor.F1 <=== Function.F1
     Cat.__proto__.Fp1 <=== Function.prototype.Fp1

     Cat.__proto__.__proto__.constructor.O1 <=== Object.O1
     Cat.__proto__.__proto__.Op1 <=== Object.prototype.Op1
     #+end_quote
     #+begin_quote
     ~mycat = new Cat();~
     mycat.__proto__.constructor.C1 <=== Cat.C1
     mycat.__proto__.Cp1 <=== Cat.prototype.Cp1
     #+end_quote

   #+begin_src javascript
       let f1 = function(){this.i = 3;}
       f1.prototype.pti = 4;
       new f1().pti === 4; // true
       // inspect:
       let x = Object.getOwnPropertyDescriptors(f1)
       x.prototype.value.pti === 123 //true
       x.__proto__.constructor === Object // true
   #+end_src

*** the *new* keywords
    + the PoC code:
    #+begin_src javascript
    let e = Object.create(null);
    e.prototype = Function.prototype;
    let f = function (){console.log("printing f")};
    f.prototype.constructor = function(){console.log("modified");}
    ff = new f();
    console.dir(ff.__proto__);
    ff.__proto__ = f.__proto__;

    #+end_src
*** who has a prototype property
**** summary
     + the prototype property is recognized when constructing a new object, so it is logical to think that, objects that have a constructor signiture have it by default.
     
**** function has a prototype property
     + a constructor is added to its prototype when a function is initialized.
       #+begin_src javascript
       function Foo() {} // the following is added automatically:
       Foo.prototype = { constructor: Foo };
       #+end_src

**** object has a prototype property 
    [[https://stackoverflow.com/questions/7929159/does-a-new-object-in-javascript-have-a-prototype-property][does a new object in javascript have a prototype property]]
    + ~{ a: 1 }~ create an instance of ~Object~ constructor
    + but ~Object.create~ create an instance which inherit an additional prototype chain:
      #+begin_src javascript
      let o = { a: 1 };
      let p = Object.create(o);
      // then:
      p.hasOwnProperty === Object.prototype.hasOwnProterty; // true
      p.a === o.a // true
      // and:
      Object.getPrototypeOf(p) === o; // true
      Object.getPrototypeOf(o) === Object.prototype; // true
      // and:
      o.constructor === Object // true
      p.constructor === Object // true
      #+end_src
     
*** constructors, prototypes trivia, who is who
    + Function() constructor
      #+begin_quote
      The Function constructor creates a new Function object. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues to eval. However, unlike eval, the Function constructor creates functions which execute in the global scope only.

      Description: 
          1. Function objects created with the Function constructor are parsed when the function is created. This is less efficient than declaring a function with a function expression or function statement and calling it within your code because such functions are parsed with the rest of the code.

          2. All arguments passed to the function are treated as the names of the identifiers of the parameters in the function to be created, in the order in which they are passed. Omitting an argument will result in the value of that parameter being undefined.

          3. Invoking the Function constructor as a function (without using the new operator) has the same effect as invoking it as a constructor.

      Syntax: ~new Function([arg1 [, arg2 [, ...argN]] ,] functionBody)~
      Example: ~const sum = new Function('a', 'b', 'return a + b');~
      #+end_quote

      #+begin_src javascript
      Function === Function.constructor === Function.prototype.constructor // true
      #+end_src

    + Object.prototype.constructor
      #+begin_quote
      The constructor property returns *a reference to the Object constructor function that created the instance object*. Note that the value of this property is a reference to the function itself, not a string containing the function's name.

      The value is only read-only for primitive values such as 1, true, and "test"

      Description: 
      // TODO   
      #+end_quote
      #+begin_src javascript
      let o = {};
      o.constructor === Object; // true
      o.constructor === Object.prototype.constructor; // true
      o.constructor === Object.constructor; // false (new must be called)
      Object.constructor === Function; // true
      #+end_src
   
    + [[https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript][__proto__ vs prototype]]
      #+begin_quote
      + __proto__ is the actual object that is used in the lookup chain to resolve methods, etc.
      + prototype is the object that is used to build __proto__ when you create an object with new.
      #+end_quote
      #+begin_src javascript
      let o = {};
      o.__proto__ === Object.prototype; // true
      // hence:
      o.constructor === Object.prototype.constructor; // true
      #+end_src
      
*** Object.create(null)
    + ~{} == Object.create(Object.prototype)~
    + while Object.create(null) has no prototype
      
* Section 38, Vue
** instance proterties and methods(objects in a vue instance)
   + el (only allowed on an root instance, i.e., an vue instancte created with ~new~)
   + data(){} (state of an object)
     - note that: we might want to call this.someProp, hence data() need to be a normal function rather than an arrow function. The same goes to methods;
   + props:{} (read-only, managed by the parent objects)
   + methods:{} 
     - note that: arrow function should not be used to define a method, since an arrow function does not have its own ~this~.
       
** template directives
     
*** adding instance porterties
    + ~Vue.prototype.$propertyName = ...~
      - ~new Vue( { beforeCreate: ()=>{ console.log(this.$PropertyName) } } );~
    + ~var App = Object.freeze({ helpers: { f1: ()=>{} });~
      - ~new Vue( { methods: { f: App.helpers.f1 } } )~

* Section 39, React
  + double curly braces
    #+begin_src javascript
        attr={{ pathname: "/login", state: {}}}
        //The exterior set of curly braces are letting JSX know you want a JS expression. The interior set of curly braces represent a JavaScript object, meaning you’re passing in a object to the style attribute.
    #+end_src
    
* Section 40, TypeScript
** merit
   + Case0: 
     #+begin_src javascript
         > ({toString:null}) + "";
         // Uncaught TypeError: Cannot convert object to primitive value
         > ({toString:function(){return "123"}}) + ""; //'123'
         > ({valueOf:function(){return "123"}}) + ""; //'123'
     #+end_src

   + Case1:
     #+begin_src javascript
       function getLowerCaseStr(myStr) {
           return myStr.toLowerCase();
       }

       getLowerCaseStr(); // Cannot read property 'toLowerCase' of undefined;
     #+end_src

   + Case2:
     #+begin_src javascript
       const res = {
           data: {
               success: true,
               msg: "Success!",
           },
       }
       function getMsg(res) {
           if(res.data.success)
               return res.msg;  // undefined (accessing an non-existing attribute throws no Runtime error)
       }
      #+end_src
   
** javascript trivia
   + accessing attr not exist
     #+begin_src javascript
       > let o = {};
       > o.__proto__
       // [Object: null prototype] {}
       > o.toString
       [Function: toString]
     #+end_src

   + x && x.attr || 0
     //expr1 && expr2 Returns expr1 if it can be converted to false; otherwise, returns expr2. Thus, when used with Boolean values, && returns true if both operands are true; otherwise, returns false.
   
   + double exclamation mark(!!)
     //cast a variable to be a boolean value.

   + double pipe(||), logical or.
     //If expr1 can be converted to true, returns expr1; else, returns expr2.
     #+begin_src javascript
        var a = A || B; //conditional assignment, it is effectively:

        if (!!A) {
            a = A;
        } else {
            a = B;
        } // or:

        var a = A? A : B;
        #+end_src
** basic
   + colon
     #+begin_src javascript
       type shape = "circle" | "rectangle";
       let anShape: shape;
       
       // strong type an object
       interface Person {
           first: string;
           last: string;
           [key: string]: any; 
       }
       
       // strong type an function
       function pow(x: number, y: number): string{
           return Math.pow(x, y).toString();
       }
      #+end_src
   + typeof guard, redux example
     #+begin_src javascript
         // types.ts
         export const GET_ITEM_SUCCESS = 'GET_ITEM_SUCCESS';
         export const GET_ITEM_FAILURE = 'GET_ITEM_FAILURE';
         
         type ItemInfo = string; 

         interface GetItemSuccess {
             type: typeof GET_ITEM_SUCCESS;
             payload: ItemInfo;
         }

         interface GetItemFailure {
             type: typeof GET_ITEM_FAILURE;
         }

         export type GetItemActionType = 
             | GetItemSuccess
             | GetItemFailure;
         
         export type StateItemInfo {
             data?: ItemInfo;
             hasError: boolean;
             isLoading: boolean;
         } //...
     #+end_src
     #+begin_src javascript
         // Reducer.ts
         import * from './types';
         export default function getItemReducer(
             state = initState,
             action: GetItemActionType,
         ): StateItemInfo {
             switch (action.type) {
                 case GET_ITEM_FAILURE:
                     return {...state, isLoading: false, hasError: true};
                 case GET_ITEM_SUCCESS:
                     return {
                         ...state,
                         data: action.payload,
                         isLoading: false,
                         hasError: false,
                     };
                  default:
                      return state;
             }
         }
     #+end_src

*** variable scope
    + var
      // the nearest parent function
    + let
      // the nearest block
      
*** types
    + number, boolean, string, any, number[], any[]
    + enum Color { Red = 0 , Green, Blue = 2 };
    + explicit declare:
      #+begin_src javascript
          let message;
          message = 'abc';
          let endsWithC = (<string>message).endsWith('c');
          let alternativeWay = (message as string).endsWith('c');
      #+end_src
    + let drawPoint = (point: { x:number, y: number }) => {}
    + Class, Access Modifiers(default is public), auto generated value assign statement
      [[./typescript-only/src/Cp40_Class.ts]]
      #+begin_src javascript
     class Point {
         private x: number;

         constructor(x?: number, private y?: number) {
             this.x = x && x || 0;
             // this.y = y && y || 0; // value assign statement auto generated.
         }

         draw() {
             console.log("x = " + this.x, ", y = " + this.y);
         }

         getDistance(another: Point) {
             //...
         }
     }

     let point = new Point(1, 2);
     // let point: Point = new Point();
     // point.x = 1; // point.y = 2;
     point.draw();
       #+end_src

*** setter and getter, *property*
    + the underscore variable to avoid naming collision, since the convention is camel case
    + the property x maybe a function inside a class combination of getter and setter. 
    #+begin_src javascript
        class Point2 {
            constructor(public _x?: number) { }

            set x(value) { this._x = value }
            get x() { 
                return this._x && this._x + 1; }
        }

        let pt = new Point2(3);
        pt.x = 1;
        console.log(pt._x); console.log(pt.x);
    #+end_src

*** bind()
    + the basic
      #+begin_src javascript
          const module = {
              x: 42,
              getX: function() {
                  return this.x;
              }
              };
  
          const unboundGetX = module.getX;
          console.log(unboundGetX()); // The function gets invoked at the global scope
          // expected output: undefined
          
          const boundGetX = unboundGetX.bind(module);
          console.log(boundGetX());
          // expected output: 42
      #+end_src
    + bind classname instead of "this" in a constructor?
      
*** definite assignment assertions (!)
    + The definite assignment assertion is a feature that allows a ! to be placed after instance property and variable declarations to relay to TypeScript that a variable is indeed assigned for all intents and purposes, even if TypeScript’s analyses cannot detect so.
      #+begin_src javascript
        abstract class AParentClass implements AnInterface {
            str!: string;
            i: number;
            constructor(i: number) {
                this.i = i;
            }

            method1(): void {
                console.log("i(abstract class): " + this.i);
                console.log("str(abstract class): " + this.str);
            }
        }
      #+end_src
    
*** the purpose of a self executing function: (function(){})();
    
** promise
   + source code from Mozilla:
     - [[https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure][PromiseAPlusSpec]]
       + terminology
         1. "promise" is an object or function with a then method whose behavior conforms to this specification.
         2. "thenable" is an object or function that defines a then method.
         3. "value" is any legal JavaScript value (including undefined, a thenable, or a promise).
         4. "exception" is a value that is thrown using the throw statement.
         5. "reason" is a value that indicates why a promise was rejected.

       + A promise must be in one of three states: pending, fulfilled, or rejected.
         1. When pending, a promise:
            1) may transition to either the fulfilled or rejected state.
         2. When fulfilled, a promise:
            1) must not transition to any other state.
            2) must have a value, which must not change.
         3. When rejected, a promise:
            1) must not transition to any other state.
            2) must have a reason, which must not change.
         4. Here, the "must not change" means immutable identity (i.e. ===), but does not imply deep immutability.

       + A promise's ~then~ method accepts two arguments:
         #+begin_src javascript
             promise.then(onFulfilled, onRejected)
         #+end_src
         1. Both ~onFulfilled~ and ~onRejected~ are optional arguments:
            1) If ~onFulfilled~ is not a function, it must be ignored.
            2) If ~onRejected~ is not a function, it must be ignored.

         2. If ~onFulfilled~ is a function:
            1) it must be called after ~promise~ is fulfilled, with ~promise~'s value as its first argument.
            2) it must not be called before ~promise~ is fulfilled.
            3) it must not be called more than once.

         3. If ~onRejected~ is a function,
            1) it must be called after promise is rejected, with promise's reason as its first argument.
            2) it must not be called before promise is rejected.
            3) it must not be called more than once.
                 
       + ~onFulfilled~ or ~onRejected~ must not be called until the execution context stack contains only platform code. [3.1].

       + ~onFulfilled~ and ~onRejected~ must be called as functions (i.e. with no this value). [3.2]

       + ~then~ may be called multiple times on the same promise.
         1) If/when promise is fulfilled, all respective onFulfilled callbacks must execute in the order of their originating calls to then.
         2) If/when promise is rejected, all respective onRejected callbacks must execute in the order of their originating calls to then.

       + ~then~ must return a promise[3.3]. i.e.: 
         #+begin_src javascript
             promise2 = promise1.then(onFulfilled, onRejected);
         #+end_src
         1. If either ~onFulfilled~ or ~onRejected~ returns a value x, run the Promise Resolution Procedure ~Resolve (promise2, x)~.
         2. If either ~onFulfilled~ or ~onRejected~ throws an exception e, promise2 must be rejected with e as the reason.
         3. If ~onFulfilled~ is not a function and promise1 is fulfilled, promise2 must be fulfilled with the same value as promise1.
         4. If ~onRejected~ is not a function and promise1 is rejected, promise2 must be rejected with the same reason as promise1.

       + the *promise resolution procedure*
         - is an abstract operation taking as input a promise and a value, which we denote as:
           ~[[Resolve]](promise, x)~. 
           1) If x is a thenable, it attempts to make promise adopt the state of x, under the assumption that x behaves at least somewhat like a promise.
           2) Otherwise, it fulfills promise with the value x. 
              - This treatment of thenables allows promise implementations to interoperate, as long as they expose a Promises/A+-compliant then method. It also allows Promises/A+ implementations to "assimilate" nonconformant implementations with reasonable then methods.

         - To run ~[[Resolve]](promise, x)~, perform the following steps:
           1. If ~promise~ and ~x~ refer to the same object, reject promise with a TypeError as the reason.
           2. If ~x~ is a promise, adopt its state [3.4]:
              1) If ~x~ is pending, promise must remain pending until x is fulfilled or rejected.
              2) If/when ~x~ is fulfilled, fulfill promise with the same value.
              3) If/when ~x~ is rejected, reject promise with the same reason.
           3. Otherwise, if ~x~ is an object or function,
              1) Let ~then~ be ~x.then~. [3.5]
              2) If retrieving the property ~x.then~ results in a thrown exception e, reject promise with e as the reason.
              3) If ~then~ is a function, call it with ~x~ as this, first argument ~resolvePromise~, and second argument ~rejectPromise~, where:
                 1. If/when ~resolvePromise~ is called with a value ~y~, run ~[[Resolve]](promise, y)~.
                 2. If/when ~rejectPromise~ is called with a reason ~r~, reject promise with ~r~.
                 3. If both ~resolvePromise~ and ~rejectPromise~ are called, or multiple calls to the same argument are made, the first call takes precedence, and any further calls are ignored.
                 4. If calling ~then~ throws an exception ~e~,
                    1) If ~resolvePromise~ or ~rejectPromise~ have been called, ignore it.
                    2) Otherwise, reject ~promise~ with ~e~ as the reason.
              4) If then is not a function, fulfill promise with ~x~.


         
         
     - [[https://github.com/then/promise/blob/master/src/core.js][PromiseCoreImpl.js]]
   
   + new promise 
     #+begin_src javascript
         
     #+end_src
     
** How does interfaces with construct signatures work?(stackoverflow)
   + Construct signatures in interfaces are not implementable in classes; they're only for defining existing JS APIs that define a 'new'-able function. Here's an example involving interfaces new signatures that does work:
     #+begin_src javascript
       interface ComesFromString {
           name: string;
       }

       interface StringConstructable {
           new(n: string): ComesFromString;
       }

       class MadeFromString implements ComesFromString {
           constructor (public name: string) {
               console.log('ctor invoked');
           }
       }

       function makeObj(n: StringConstructable) {
           return new n('hello!');
       }

       console.log(makeObj(MadeFromString).name);  
     #+end_src

   + This creates an actual constraint for what you can invoke makeObj with:
     #+begin_src javascript
        class Other implements ComesFromString {
            constructor (public name: string, count: number) {
            }
        }

        makeObj(Other); // Error! Other's constructor doesn't match StringConstructable
     #+end_src
       
** type-assertion
*** basic
    + *as* vs <>
    #+begin_src javascript
    var foo: any;
    var bar = <string> foo;
    // however, since the <> syntax can be confusing in jsx syntax: e.g. ~</string>~
    // the *as* is recommended.
    #+end_src

    + bad practice (casting)
      #+begin_src javascript
      interface Foo {
          bar: number;
      }
      var foo = {} as Foo;
      // foo.bar === undefined;
      #+end_src

** ? intersecting(&) interfaces
   [[./S40_02_ExtendsVsIntersection.ts]]
   + care: ~number & string~ is reduced to ~never~
   + but the overload seems to be preserved
     
** Interfaces vs. Type Aliases
   [[https://www.typescriptlang.org/docs/handbook/advanced-types.html][advanced-types]]
   + interface extends is similar to type intersect(&)
   + Almost all features of an interface are available in type, the key distinction is that a type cannot be re-opened to add new properties vs a interface which is always extendable.

** decorators (annotations)
   + AOP, Logger And Timer? [[./S40_02_DecoratorAndDescriptor.ts]]
   + a decorator:
     #+begin_src javascript
     function Frozen(constructor: Function){
         Object.freeze(constructor);
         Object.freeze(constructor.protopyte);
     }
     @Frozen
     export class IceCreamComponent { // the class can no longer be extended now.
     }
     console.log(Object.isFrozen(IceCreamComponent)); 
     #+end_src
   + a factory as a decorator:
     #+begin_src javascript
     function Emoji() {
     // the target is the parent class, the key is the name of the property being decorated
         return function(target: Object, key: string | symbol) {
             let val = target[key];
             const getter = () => {
                 return val;
             };
             const setter = () => { 
                 console.log("updating flavor...");
                 val = `www ${next} www`;
             };
             Object.defineProperty(target, key, {
             get: getter,
             set: setter,
             enumerable: true,
             configurable: true,
             });
         };
     }
     #+end_src
** map, record
   #+begin_src javascript
   new map()
   a.set("k", 1)
   a.get("k")
   a.has("k")
   #+end_src
* Section 50, OLTP (Online Transaction Processing)
** basic
*** the primary object of an OLTP system
    + data processing, not data analysis 
      #+begin_quote
      for example, a bank transaction that withdraw an amount of money on an account concurrently. The OLTP system ensure the DB operation is atomatic, and earlier valid request be processed first so that a potential error due to the race condition could be avoided. i.e., first-come first-serve.
      #+end_quote
      
*** merit of an OLTP system
    + It administers daily transactions of an organization.
    + simplied individual processes.

*** disadvantage of an OLTP system
    + severely effect online transations on hardware failures.
    + concurrency issue, since it allow multiple users to access and change the same data at the same time.

*** OLTP vs OLAP
    | criteria      | OLTP                                 | OLAP                              |
    |---------------+--------------------------------------+-----------------------------------|
    | data          | large numbers of short trans.l data  | large volume of data              |
    | process       | to manage db modification            | to analyse and retrieve data      |
    | functionality | online db modifying system           | online db query management system |
    | methods       | DBMS methods                         | data warehousing methods          |
    | query         | CRUD                                 | SELECT majority                   |
    | backup        | complete + incremental bk needed     | infrequent backup is OK           |
    | style         | fast response time: normalized, etc. | sources => one consolidate db     |
    |               |                                      |                                   |
    + trans.l = transactional
