;; -*- mode: org; eval: (company-mode -1); -*-
//The C Porgramming Language, Brian W. Kernighan, Dennis M.Ritchie, etc. (1988), 289 pages
//The Linux programming interface, a Linux and UNIX system programming handbook by Michael Kerrisk, No Starch Press (2010), 1506 pages
--------------------------------------------------------------------------------

//The C
* Chapter 1, the basic
  [[./Cp01_HelloWorld.c]]
  
** while loop, for loop
  [[./Cp01_Loop.c]]
  
** symbolic constants
   [[./Cp01_SymbolicConstants.c]]
** ++
   [[./Cp01_IncrementAndGet.c]]
   
** printf format
   + %c char
   + %s char*
   + %d int/short
   + %u unsigned int/short
   + %o octal
   + %x hexadecimal
   + %f float
   + %e float
   + %g float
   + %ld long
   + %lu unsigned long
   + %lo long, unsigned long
   + %lx long, unsigned long
   + %lf double
     
** array
   [[./Cp01_Array.c]]
   
** function
   [[./Cp01_ReadLine.c]]
   
** the EOF implementation
   //some use \0?
   
** automatic variables (local variables, e.g., i, j, etc.)

** *extern* 
   //ref: stackoverflow, what-is-the-effect-of-extern-c-in-c
   //though public(external) variables can exist without it

** data type qualifer
   + char
   + int
   + float
     //f, F, lf, lF (long double), default is double
   + double
   + *short* int
   + *long* int
   + *signed* / *unsigned* char, int. 
     //1L, 1l, 1uL, 1UL
   + long double
     
//0XFUL, an unsigned long 0xF

** characters escape
   '\ooo' where ooo is one to three octal digits (0...7) or by,
   '\xhh' where hh is one or more hexadecimal digits (0...9, a...f, A...F). 
   #define VTAB '\013' //ASCII vertical tab.
   #define BELL '\007' //ASCII bell character.
   
   '\0' represents character with value zero.

** extern
*** What is the difference between a definition and a declaration? (stack overflow)
//A declaration introduces an identifier and describes its type, be it a type, object, or function. A declaration is what the compiler needs to accept references to that identifier. 
    
    *These are declarations*:
    + extern int bar;
    + extern int g(int, int);
    + double f(int, double); //extern can be omitted for function declarations
    + class foo; //no extern allowed for type declarations

//A definition actually instantiates/implements this identifier. It's what the linker needs in order to link references to those entities. 
    
    *These are definitions* corresponding to the above declarations:
    + int bar;
    + int g(int lhs, int rhs) {return lhs*rhs;}
    + double f(int i, double d) {return i+d;}
    + class foo {};
//A definition can be used in the place of a declaration.

//An identifier can be declared as often as you want. Thus, the following is legal in C and C++:

     + double f(int, double);
     + double f(int, double);
     + extern double f(int, double); // the same as the two above
     + extern double f(int, double);
However, it must be defined exactly once. If you forget to define something that's been declared and referenced somewhere, then the linker doesn't know what to link references to and complains about a missing symbols. If you define something more than once, then the linker doesn't know which of the definitions to link references to and complains about duplicated symbols.

*** How do I use extern to share variables between source files? (stack overflow)
//Using extern is only of relevance when the program you're building consists of multiple source files linked together, where some of the variables defined, for example, in source file file1.c need to be referenced in other source files, such as file2.c.
+ A variable is declared when the compiler is *informed* that a variable exists (and this is its type); it does not allocate the storage for the variable at that point.
+ A variable is defined when the compiler *allocates the storage* for the variable.
  
*** Best Practice
//The clean, reliable way to declare and define global variables is to use a header file to contain an extern declaration of the variable.

The header is included by the one source file that defines the variable and by all the source files that reference the variable. For each program, one source file (and only one source file) defines the variable. Similarly, one header file (and only one header file) should declare the variable. The header file is crucial; it enables cross-checking between independent TUs (translation units — think source files) and ensures consistency.

Although there are other ways of doing it, this method is simple and reliable. It is demonstrated by file3.h, file1.c and file2.c:

  *file3.h*
      extern int global_variable;  /* Declaration of the variable */

  *file1.c*
      #include "file3.h"  /* Declaration made available here */
      #include "prog1.h"  /* Function declarations */

      /* Variable defined here */
      int global_variable = 37;    /* Definition checked against declaration */
      int increment(void) { return global_variable++; }
  
  *file2.c*
      #include "file3.h"
      #include "prog1.h"
      #include <stdio.h>

      void use_it(void)
      {
          printf("Global variable: %d\n", global_variable++);
      }

//The next two files complete the source for prog1:

//The complete programs shown use functions, so function declarations have crept in. Both C99 and C11 require functions to be declared or defined before they are used (whereas C90 did not, for good reasons). I use the keyword extern in front of function declarations in headers for consistency — to match the extern in front of variable declarations in headers. Many people prefer not to use extern in front of function declarations; the compiler doesn't care — and ultimately, neither do I as long as you're consistent, at least within a source file.

    *prog1.h*
    extern void use_it(void);
    extern int increment(void);

    *prog1.c*
    #include "file3.h"
    #include "prog1.h"
    #include <stdio.h>

    int main(void)
    {
        use_it();
        global_variable += 19;
        use_it();
        printf("Increment: %d\n", increment());
        return 0;
    }
    //prog1 uses prog1.c, *file1.c*, *file2.c*, file3.h and prog1.h.

    *prog1.mk*
    # Minimal makefile for prog1
    PROGRAM = prog1
    FILES.c = prog1.c file1.c file2.c
    FILES.h = prog1.h file3.h
    FILES.o = ${FILES.c:.c=.o}

    CC      = gcc
    SFLAGS  = -std=c11
    GFLAGS  = -g
    OFLAGS  = -O3
    WFLAG1  = -Wall
    WFLAG2  = -Wextra
    WFLAG3  = -Werror
    WFLAG4  = -Wstrict-prototypes
    WFLAG5  = -Wmissing-prototypes
    WFLAGS  = ${WFLAG1} ${WFLAG2} ${WFLAG3} ${WFLAG4} ${WFLAG5}
    UFLAGS  = # Set on command line only

    CFLAGS  = ${SFLAGS} ${GFLAGS} ${OFLAGS} ${WFLAGS} ${UFLAGS}
    LDFLAGS =
    LDLIBS  =

    all:    ${PROGRAM}

    ${PROGRAM}: ${FILES.o}
    ${CC} -o $@ ${CFLAGS} ${FILES.o} ${LDFLAGS} ${LDLIBS}

    prog1.o: ${FILES.h}
    file1.o: ${FILES.h}
    file2.o: ${FILES.h}

    # If it exists, prog1.dSYM is a directory on macOS
    DEBRIS = a.out core *~ *.dSYM
    RM_FR  = rm -fr

    clean:
    ${RM_FR} ${FILES.o} ${PROGRAM} ${DEBRIS}
    
*** General Guidelines(stack overflow)
//Rules to be broken by experts only, and only with good reason:
    + A header file only contains extern declarations of variables — never static or unqualified variable definitions.
    + For any given variable, only one header file declares it (SPOT — Single Point of Truth).
    + A source file never contains extern declarations of variables — source files always include the (sole) header that declares them.
    + For any given variable, exactly one source file defines the variable, preferably initializing it too. (Although there is no need to initialize explicitly to zero, it does no harm and can do some good, because there can be only one initialized definition of a particular global variable in a program).
    + The source file that defines the variable also includes the header to ensure that the definition and the declaration are consistent.
    + A function should never need to declare a variable using extern.
    + Avoid global variables whenever possible — use functions instead.
*** ? How does gcc handle external.
