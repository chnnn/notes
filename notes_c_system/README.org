;; -*- mode: org; eval: (company-mode -1); -*-
+ Kernighan, B. & Ritchie, D. (1988) The ANSI C Programming Language (2nd ed.). US: Prentice Hall. (289 pages)

+ The Linux programming interface, a Linux and UNIX system programming handbook by Michael Kerrisk, No Starch Press (2010), 1506 pages
  
+ FS4 C++ Primer
+ FS5 A Tour of C++, Stroustrup, Bjarne (2018), 222 pages 
+ FS6 Effective modern C++_[42 specific ways to improve your use of C++11 and C++14]-O'Reilly, Meyers, Scott (2017), 301 pages

--------------------------------------------------------------------------------

//The C
* Chapter 1, the basic
  [[./Cp01_HelloWorld.c]]
  
** symbolic constants
   [[./Cp01_SymbolicConstants.c]]
** ++
   [[./Cp01_IncrementAndGet.c]]
   
** printf format
   + %c char
   + %s char*
   + %d int/short
   + %u unsigned int/short
   + %o octal
   + %x hexadecimal
   + %f float
   + %e float
   + %g float
   + %ld long
   + %lu unsigned long
   + %lo long, unsigned long
   + %lx long, unsigned long
   + %lf double
     
** array
   [[./Cp01_Array.c]]
   
** function
   [[./Cp01_ReadLine.c]]
   
** the EOF implementation
   //some use \0?
   
** automatic variables (local variables, e.g., i, j, etc.)

** *extern* 
   //ref: stackoverflow, what-is-the-effect-of-extern-c-in-c
   //though public(external) variables can exist without it

** data type qualifer
   + char
   + int
   + float
     //f, F, lf, lF (long double), default is double
   + double
   + *short* int
   + *long* int
   + *signed* / *unsigned* char, int. 
     //1L, 1l, 1uL, 1UL
   + long double
     
//0XFUL, an unsigned long 0xF

** characters escape
   '\ooo' where ooo is one to three octal digits (0...7) or by,
   '\xhh' where hh is one or more hexadecimal digits (0...9, a...f, A...F). 
   #define VTAB '\013' //ASCII vertical tab.
   #define BELL '\007' //ASCII bell character.
   
   '\0' represents character with value zero.

** extern
*** What is the difference between a definition and a declaration? (stack overflow)
    + A declaration introduces an identifier and describes its type, be it a type, object, or function. A declaration is what the compiler needs to accept references to that identifier. 

        *These are declarations*:
        + extern int bar;
        + extern int g(int, int);
        + double f(int, double); //extern can be omitted for function declarations
        + class foo; //no extern allowed for type declarations

    + A definition actually instantiates/implements this identifier. It's what the linker needs in order to link references to those entities. 
    
        *These are definitions* corresponding to the above declarations:
        + int bar;
        + int g(int lhs, int rhs) {return lhs*rhs;}
        + double f(int i, double d) {return i+d;}
        + class foo {};

    + A definition can be used in the place of a declaration.

    + An identifier can be declared as often as you want. Thus, the following is legal in C and C++:

        + double f(int, double);
        + double f(int, double);
        + extern double f(int, double); // the same as the two above
        + extern double f(int, double);

    + However, it must be defined exactly once. If you forget to define something that's been declared and referenced somewhere, then the linker doesn't know what to link references to and complains about a missing symbols. If you define something more than once, then the linker doesn't know which of the definitions to link references to and complains about duplicated symbols.

*** How do I use extern to share variables between source files? (stack overflow)
    + Using extern is only of relevance when the program you're building consists of multiple source files linked together, where some of the variables defined, for example, in source file file1.c need to be referenced in other source files, such as file2.c.
      - A variable is declared when the compiler is *informed* that a variable exists (and this is its type); it does not allocate the storage for the variable at that point.
      - A variable is defined when the compiler *allocates the storage* for the variable.
  
*** Best Practice
    + The clean, reliable way to declare and define global variables is to use a header file to contain an extern declaration of the variable.

        - The header is included by the one source file that defines the variable and by all the source files that reference the variable. For each program, one source file (and only one source file) defines the variable. Similarly, one header file (and only one header file) should declare the variable. The header file is crucial; it enables cross-checking between independent TUs (translation units — think source files) and ensures consistency.

        - Although there are other ways of doing it, this method is simple and reliable. It is demonstrated by file3.h, file1.c and file2.c:

     #+begin_src c
       //*file3.h*
       extern int global_variable;  /* Declaration of the variable */
     #+end_src
   
     #+begin_src c
       //*file1.c*
       #include "file3.h"  /* Declaration made available here */
       #include "prog1.h"  /* Function declarations */
   
       /* Variable defined here */
       int global_variable = 37;    /* Definition checked against declaration */
       int increment(void) { return global_variable++; }
     #+end_src
   
     #+begin_src c
       //*file2.c*
       #include "file3.h"
       #include "prog1.h"
       #include <stdio.h>
       
       void use_it(void)
       {
           printf("Global variable: %d\n", global_variable++);
       }
      #+end_src

    + The next two files complete the source for prog1:

    + The complete programs shown use functions, so function declarations have crept in. Both C99 and C11 require functions to be declared or defined before they are used (whereas C90 did not, for good reasons). I use the keyword extern in front of function declarations in headers for consistency — to match the extern in front of variable declarations in headers. Many people prefer not to use extern in front of function declarations; the compiler doesn't care — and ultimately, neither do I as long as you're consistent, at least within a source file.

      #+begin_src c
      //*prog1.h*
      extern void use_it(void);
      extern int increment(void);
      #+end_src

      #+begin_src c
      //*prog1.c*
      #include "file3.h"
      #include "prog1.h"
      #include <stdio.h>
      #+end_src

      int main(void)
      {
          use_it();
          global_variable += 19;
          use_it();
          printf("Increment: %d\n", increment());
          return 0;
      }
      //prog1 uses prog1.c, *file1.c*, *file2.c*, file3.h and prog1.h.
      #+end_src

     #+begin_src
     //*prog1.mk*
     # Minimal makefile for prog1
     PROGRAM = prog1
     FILES.c = prog1.c file1.c file2.c
     FILES.h = prog1.h file3.h
     FILES.o = ${FILES.c:.c=.o}

     CC      = gcc
     SFLAGS  = -std=c11
     GFLAGS  = -g
     OFLAGS  = -O3
     WFLAG1  = -Wall
     WFLAG2  = -Wextra
     WFLAG3  = -Werror
     WFLAG4  = -Wstrict-prototypes
     WFLAG5  = -Wmissing-prototypes
     WFLAGS  = ${WFLAG1} ${WFLAG2} ${WFLAG3} ${WFLAG4} ${WFLAG5}
     UFLAGS  = # Set on command line only

     CFLAGS  = ${SFLAGS} ${GFLAGS} ${OFLAGS} ${WFLAGS} ${UFLAGS}
     LDFLAGS =
     LDLIBS  =

     all:    ${PROGRAM}

     ${PROGRAM}: ${FILES.o}
     

     ${CC} -o $@ ${CFLAGS} ${FILES.o} ${LDFLAGS} ${LDLIBS}

     prog1.o: ${FILES.h}
     file1.o: ${FILES.h}
     file2.o: ${FILES.h}

     # If it exists, prog1.dSYM is a directory on macOS
     DEBRIS = a.out core *~ *.dSYM
     RM_FR  = rm -fr

     clean:
     ${RM_FR} ${FILES.o} ${PROGRAM} ${DEBRIS}
     #+end_src
    
*** General Guidelines(stack overflow)
//Rules to be broken by experts only, and only with good reason:
    + A header file only contains extern declarations of variables — never static or unqualified variable definitions.
    + For any given variable, only one header file declares it (SPOT — Single Point of Truth).
    + A source file never contains extern declarations of variables — source files always include the (sole) header that declares them.
    + For any given variable, exactly one source file defines the variable, preferably initializing it too. (Although there is no need to initialize explicitly to zero, it does no harm and can do some good, because there can be only one initialized definition of a particular global variable in a program).
    + The source file that defines the variable also includes the header to ensure that the definition and the declaration are consistent.
    + A function should never need to declare a variable using extern.
    + Avoid global variables whenever possible — use functions instead.
*** ? How does gcc handle external, const pool, namespace, etc..

*** misc
    //standards are stated in the following header files, as well as several util functions:
      + <limit.h>
      + <float.h>

** enum
   [[Cp01_Enum.c]]
   
** declarations
   + float eps = 1.0e-5;
   + const char msg[] = "msg: ";
   
** type conversion
   + A char is just a small integer, so chars may be freely used in arithmetic expressions.
   [[Cp01_TypeConversion.c]]
   
   *common library*
   + <ctype.h>
     
   *trivia*
   char -> short -> int
   
** math
   + <Math.h>
     - pow
     
** control flow
   + while && for loops
     [[./Cp01_Loop.c]]
  
   + switch
     - [[./Cp01_Switch.c]]
     - The condition in the switch-statement needs not to be type int exactly but "any expression of integer type (char, signed or unsigned integer, or enumeration)" 
     - (though a long did not threw compiler error immediately)
     
   + do ... while (expression);

   + goto and labels
     - goto found;
     - found: //...

** basic function structures
   + ~cc main.c getline.c strindex.c~
     - say main.c has error, then possible to recompile with: 
     - ~cc main.c getline.o strindex.o~
   
   *with header file*
   + cc Cp01_Bitwise.c Cp00_AnyToBinary.c -o Cp01_Bitwise
   + //TODO q: is bitwise shift direction affected by Endianess?
   [[./Cp01_Bitwise.c]]

** misc
   + getch();
   + ungetch(c);
   
   + #define A_CONSTANT_VALUE 100
     vs.
     int i 100;
     //the former is compiled to source code as a constant.
     //while the later gets load to memory.
     
** *scopes*
   + vars without declaration is private to the file.
   + *static variavles*
     [[*Memory Layout of C Programs]]
   
* Chapter 2, program stucture
** Memory Layout of C Programs, compilation
   + the memory layout of a process, with example:
     - src:
       #+begin_src c
       #include <stdio.h>

       int global_initialized = 21;
       int global_uninitialized;

       int func(){
           int local_var_inside_func;

           int *pointer = malloc (sizeof(int)); // let rhs int = #dynamic01.int; lhs *pointer = #pointer
           free(pointer);
       }

       int main(int argc, char *argv[]) {
           int local_var_inside_main;

           func();
           return 0;
       }
       #+end_src
    - the memory layout of the above process:
   | memory                              |                                                           |
   |-------------------------------------+-----------------------------------------------------------|
   | Command Line Arguments Memory       | Argv[0], Argv[1], ..., Argv[n]                            |
   |-------------------------------------+-----------------------------------------------------------|
   | Stack (all static memory)           | main(), local_var_inside_main                             |
   |                                     | called by main(): func(), local_var_inside_func, #pointer |
   |-------------------------------------+-----------------------------------------------------------|
   |                                     |                                                           |
   |                                     |                                                           |
   | stack grows down &darr;             |                                                           |
   | heap grows up &uarr;                |                                                           |
   |                                     |                                                           |
   |                                     |                                                           |
   |-------------------------------------+-----------------------------------------------------------|
   | Heap (all dynamic allocated memory) | #dynamic01.int                                            |
   |-------------------------------------+-----------------------------------------------------------|
   | the BSS segment                     | global_uninitialized, and local_static_vars_unitialized   |
   |-------------------------------------+-----------------------------------------------------------|
   | the data segment                    | global_initialized, and local_static_vars_initialized     |
   |-------------------------------------+-----------------------------------------------------------|
   | Text Segment                        | a.out                                                     |
   |-------------------------------------+-----------------------------------------------------------|

** static
   [[./Cp02_Static.c]]
   + Inside a function, meaning: retains its value between calls (extend the lifetime of the variable to the program, instead of the function)
     #+begin_quote
     When the function is called the first time, the static local varables will be stored at the data segment of the process, instead of the stack. Thus among calls its value retains. 
     If the local var is static declared without an initializer, it will be filled with 0 or NULL and put to the BSS segment.
     #+end_quote
     [[https://en.wikipedia.org/wiki/Data_segment][Wikipedia - Data_segment]]
     - static local variables
   + Outside a function, at the function level, meaning: visible only in this file(it effect the scope of a global variable or function, i.e., to be "visible within that file only"); usage:
     - static global variables
     - static functions

** register variable
   + A register declaration advises the compiler that the variable in question will be heavily used. The idea is that register variables are to be placed in machine registers, which may result in smaller and faster programs. But compilers are free to ignore the advice.
   + It's a hint to the compiler that the variable will be heavily used and that you recommend it be kept in a processor register if possible. Most modern compilers do that automatically, and are better at picking them than us humans.
   #+begin_src c
   register int x;
   register char c;
   f(register unsigned m, register long n)
   {
       register int i;
       ...
   }
   #+end_src

** block structure
   + c is not. no nested functions
   + the local vars hides the external ones when present. bad practice.

** initialization
   + In the absence of explicit initialization, ~external~ and ~static~ variables are guaranteed to be
initialized to zero; ~automatic~ and ~register~ variables have *undefined* (i.e., garbage) initial values.
      *automatic variables*:
       #+begin_quote
       All variables declared *within a block of code* are automatic by default. An uninitialized automatic variable has an undefined value until it is assigned a valid value of its type.
       #+end_quote

   + the initialization is done once, conceptionally before the program begins execution. 

   + ~external~ and ~static~ variables must be initialized by a constant expression.

   + ~automic~ and ~register~ variables can be initialized by any previously defined values or function calls.

   + ~array~
     #+begin_quote
     If there are fewer initializers for an array than the specified size, the others will be zero for
external, static and automatic variables.
     #+end_quote
     #+begin_src c
     int intArr[4]; // 0000
     int i = 5, intArr2[2] = { 1, 2 }, j;
     int intArr3[] = { 1, 2, 3 };
     #+end_src

** the c preprocessr
*** file inclusion
    + replacing all existing #include statement with their content
      #+begin_src c
      #include "filename"
      #include <filename>
      #+end_src
*** macro substitution  
    + macro names are replaced with real code
      #+begin_src c
      #define name replacement text \
                   use backslash to break line \
      #define forever for (;;)
      #define max(A,B) ((A) > (B) ? (A) : (B))
      // Note the parthensis, without them:
      #define square(x) x * x /* WRONG */
      // square(z + 1) == z + 1 * z + 1;
      #+end_src
    + ~#undef~ diretive
      #+begin_quote
      Removes (undefines) a name previously created with #define.
      #+end_quote
    + ~#~ + parameter name => quoted string with parameter replaced by the actual argument
      #+begin_src c
      #define dprint(expr) printf(#expr " = %g\n", expr)
      // When this is invoked, as in:
      // dprint(x/y)
      // the macro is expanded into:
      // printf("x/y" " = &g\n", x/y);
      // and the strings are concatenated, so the effect is
      // printf("x/y = &g\n", x/y);
      #+end_src
    + ~##~ 
      #+begin_quote
      The preprocessor operator ## provides a way to concatenate actual arguments during macro expansion. If a parameter in the replacement text is adjacent to a ##, the parameter is replaced by the actual argument, the ## and surrounding white space are removed, and the result is re-scanned.
      #+end_quote
      #+begin_src c
      #define paste(front, back) front ## back
      // paste(name, 1) == name1;
      #+end_src

*** conditional inclusion
    + ~#if~ or ~ifndef~ , ~#endif~ 
      #+begin_src c
      #if !defined(HDR)
      #define HDR
      #ifndef HDR
      #define HDR
      #endif
      #if SYSTEM == SYSV
          #define HDR "sysv.h"
      #elif SYSTEM == BSD
          #define HDR "bsd.h"
      #elif SYSTEM == MSDOS
          #define HDR "msdos.h"
      #else
          #define HDR "default.h"
      #endif
      #+end_src
      
* Chapter 3, Pointer
** & and *
   + declaration of a pointer ~p~: ~int *p~, the ~*p~ is an int.
   #+begin_src c
   int a;
   int *p; // declaration, but still uninitialized.
   // i.e., the memory for ~p~ is assigned, however it still contains unknown value.
   //! *p = 1; // Bus Error: trying to assign value to the bogus pointer ~p~. it may points to nowhere or everywhere.
   p = &a; // p = (the address of a)
   a = 5;
   print *p // 5, dereferencing
   double *dp, atof(char *) //declaration
   #+end_src
   
** pointer arithmetic, type safety
   [[./Cp03_PointerArithmetic.c]]
   + ~*p++~ is not ~(*p)++~, since unary operators like ~*~ and ~++~ associate right to left.
   + type safety: let ~**p = x;~, during compilation possible to know if x is a pointer or a raw value, if x is not a pointer which normally it suppose to be, a warn would be thrown.
     
** *pointers and arrays*
   [[./Cp03_PointersAndArrays.c]]
   + arr = p
     #+begin_src c
     int a[10];
     int *pa;

     pa = a; // 1
     pa = &a[0]; // 2
     // they have the same effect, i.e., p == a
     #+end_src
     #+begin_quote
     + By definition, the value of a variable or expression of type array is the address of element zero of the array. 

     + In evaluating a[i], C converts it to *(a+i) immediately; the two forms are equivalent.

     + There is one difference between an array name and a pointer that must be kept in mind. *A pointer
is a variable, so pa=a and pa++ are legal. But an array name is not a variable; constructions like a=pa and a++ are illegal.*
     #+end_quote

** pointer arrays
   + best suit for an internal static array.
     [[./Cp03_PointerArrays.c]]
     #+begin_src c
     static char *name[] = { "str 1", "str 2" };
     // the name is an array of character pointers;
     #+end_src
   + drawback: length of a pointer array cannot be determined:
     [[https://stackoverflow.com/questions/492384/how-to-find-the-sizeof-a-pointer-pointing-to-an-array][how-to-find-the-sideof-a-pointer-pointing-to-an-array]]
     #+begin_src c
     static char *arr2[10] = { "a", "b", "c" }; // what is the size of *arr2[] ?
     #+end_src
     
*** pointer array vs multi-dimensional array
    + Given:
      #+begin_src c
      int a[10][20];
      int *b[10];
      #+end_src
      #+begin_quote
      then a[3][4] and b[3][4] are both syntactically legal references to a single int. But a is a true two-dimensional array: 200 int-sized locations have been set aside, .... For b, however, the definition only allocates 10 pointers and does not initialize them; initialization must be done explicitly, either statically or with code.
      The important advantage of the pointer array is that the rows of the array may be of different lengths. That is, *each element of b need not point to a twenty-element vector*; some may point to two elements, some to fifty, and some to none at all.
      #+end_quote
    + the nested array may vary in length. i.e., in java: ~int[][] arr = new int[10][];~

*** the memory location of array
    + [[https://stackoverflow.com/questions/35442414/dynamic-vs-static-array-in-c][dynamic-vs-static-array-in-c]]
    + [[./Cp03_StaticVarMemoryStructure.c]]
    + with static, file scope or function scope, without initializer: filled with ~0~(for scalars) or ~NULL~(for pointers)

*** strlen and sizeof
     - sizeof("a"); // 2
     - strlen("a"); // 1
     - ~"a"~ is stored as ~"a\0"~;
     - sizeof("");  // 1
       + char str0[0];
       + sizeof(str0); // 0

         
** compound literal as implicit variable is not available before C90 or in C++
   + General better idea: assign a variable, then allocate a pointer to it.
   + ~int *p = &(int){42};~ [[https://stackoverflow.com/questions/24805673/declare-and-initialize-pointer-concisely-i-e-pointer-to-int][compund literal]], should be avoided.
   + use [[./Cp03_PointerInitialization.c]]
     #+begin_src c
     char arr[] = { 'a', 'b' };
     char *pa = arr;
     printf("%c\n", *++pa); // b
     #+end_src
   + or:
     #+begin_src c
     int *i = malloc(sizeof *i);
     int i = 42, *p = &i;
     #+end_src

** array has *no bound checking*
   + ~int arr[1];~, ~arr[9] = 1~ is accessable.
   + arr[n] is syntactic sugar for *(arr + n).

** multi-dimensional arrays
   + ~array[i][j]~, i.e., array[i] is an array.

** *memory allocation*
*** ? ~alloc~ and ~afree(p)~
    + a test: ~if (allocbuf + ALLOCSIZE - allocp >= n)~
    + on free, free a pointer?

*** character pointers
    [[./Cp03_CharacterPointers.c]]
    #+begin_src c
    char *pstr;
    pstr = "some string"; // the pstr is merely but a pointer.
    #+end_src

*** arrow notation (struct and union)
    + The Dot(.) operator is used to normally access members of a structure or union.
    + The Arrow(->) operator exists to access the members of the structure or the unions using pointers.
    #+begin_src c
    // C program to show Arrow operator 
    // used in structure 

    #include <stdio.h> 
    #include <stdlib.h> 

    // Creating the structure 
    struct student { 
        char name[80]; 
        int age; 
        float percentage; 
    }; 

    // Creating the structure object 
    struct student* emp = NULL; 

    // Driver code 
    int main() 
    { 
        // Assigning memory to struct variable emp 
        emp = (struct student*) 
            malloc(sizeof(struct student)); 

        // Assigning value to age variable 
        // of emp using arrow operator 
        emp->age = 18; 

        // Printing the assigned value to the variable 
        printf("%d", emp->age); 

        return 0; 
    } 
    #+end_src
    
** command-line arguments
   [[./Cp03_CommandLineArguments.c]]
   + ~int main(int argc, char const *argv[])~
     1. the ~argc~ is total argument count, ~*argv[n]~ is a list of argument strings;
     2. argv[0] is the name of the program;
     3. the standard requires argv[argc] to be a null pointer.

        
*** a way to handle the flag
    + [[./Cp03_HandlingTheFlag.c]]
    + [[https://en.cppreference.com/w/c/language/operator_precedence][C Operator Precedence]] suffix++ has hight precedence than ++prefix 
    #+begin_src c
    (*++argv)[0] // loop through the first letter of all vars, if == '-'
    *++argv[0] // *argv[i++]
    // the [0] bind tighter than the *.
    #+end_src

** *pointers to functions*
   + function is not a variable but can be referenced using a pointer.
     #+begin_src c
     (int (*)(void*,void*))(numeric ? numcmp : strcmp));
     #+end_src
   + function pointer not slower than a direct function call.
     [[https://stackoverflow.com/questions/2438539/does-function-pointer-make-the-program-slow]]

* Chapter 4, Memory allocation
** when to use, or how does dynamic memory allocation differ from variable initialization?
   + the initializers are static while dynamic memory allocation functions allow the size be decided in runtime.
   + the malloc functions behave in accordance with all alignment restrictions of modern machine.

** malloc ~void *malloc(size_t size)~
   + [[./Cp4_Malloc.c]]
   + note that malloc does initialize the memory content
   #+begin_src c
   int n = 3;
   int *A = (int*)malloc(n*sizeof(int));
   free(A);
   #+end_src

** calloc ~void calloc(size_t num, size_t size)~
   + calloc initial the memory content to zero
   #+begin_src c
   int *A = (int*)calloc(n, sizeof(int))
   #+end_src

** realloc ~void realloc(*void ptr, size_t size)~
   + note that the realloc may change the initial memory address on enlarging.
   + so that the original pointer should either be overwrited or set to NULL.
   #+begin_src c
   int n = 3;
   int *A = (int*)malloc(n*sizeof(int));
   int *B = (int*)realloc(NULL, n*sizeof(int)) // equivalent to a malloc
   int *B = (int*)realloc(A, 2*n*sizeof(int))
   int *B = (int*)realloc(A, 0) // equivalent to free(A) 
   #+end_src

** free and good practice
   #+begin_src c
   int *A = (int*)malloc(n*sizeof(int));
   free(A);
   A = NULL;
   free(A); // free do nothing if A is a null.
   #+end_src
  
** memory address   
   + [[./Cp05_Struct.c]]
   + pointers are 12*4=48 bits int in x86-64 system, 2**48 * 1 byte == 256TB
   #+begin_src c
    int main(){
        struct point origin, *pp;
        pp = &origin;
        printf("%p\n", (void*)(pp)); // 0x7fff ffff dd60
        printf("%x\n", pp); // ffff dd60
    }
   #+end_src

* Chapter 5, Struct

** basic
   + [[./Cp05_Struct.c]]
     
   + the pointer of a struct initially point to its first element.
     #+begin_src c
     struct point origin, *pp;
     pp = &origin;
     origin.x = 1, origin.y = 2;
     printf("%d\n", pp), printf("%d\n", &(*pp).x); // same
     #+end_src
     
   + define an array of struct
     #+begin_src c
     int ARRAY_LENGTH = 2;
     struct key {
         char *word;
         int count;
     } keytab[ARRAY_LENGTH]; // the length of keytab is 2
     #+end_src
     
** the arrow operator
   + Usage: pointerToAStructure->elementOfTheStructure
   + Description: Structure and union member access through pointer;
   + Associativity: Left-to-right;
   + Precendence: 1;

   #+begin_src c
   struct point
   {
       int x;
       int y;
   } p0, p1, points[] = {2, 3, 4, 5};
   printf("%p\n", points), printf("%p\n", &points->x);
   //! printf("%d\n", points.x);
   printf("%d\n", points->x);
   #+end_src

** pointer to a struct array
   #+begin_src c
   typedef struct point pointArray[];
   pointArray *pointsListPointer;
   pointsListPointer = &points;
   #+end_src

** self-referential structure
   + consider a tree, holding words and its frequence:
     #+begin_src c
     struct tnode{
         char *word;
         int count;
         struct tnode *left; // legal, since only declaring a pointer of the type tnode.
         struct tnode *right;
     }
     #+end_src

   + for two structures that refers to each other:
     #+begin_src c
     struct t {
         // ...
         struct s *p;
     };
     struct s {
         // ...
         struct t *q;
     };
     #+end_src

   + adding a nodes to a tree
     #+begin_src c
     #include <stdlib.h>
     /* talloc: make a tnode */
     struct tnode *talloc(void)
     {
         return (struct tnode *) malloc(sizeof(struct tnode));
     }

     char *strdup(char *s)
     {
         char *p;
         /* make a duplicate of s */
         p = (char *) malloc(strlen(s)+1); /* +1 for '\0' */ // malloc returns NULL if no space is available
         if (p != NULL)
         strcpy(p, s);
         return p; // if not enough memory, the NULL is sent to the parent.
     }
     #+end_src

   + how to free a tree linked list?
     #+begin_src c
     void freeTree(struct tnode* root)
     {
         while(root != NULL)
         {
             free(word);
             word = NULL;
             free(root->left);
             root->left = NULL;
             free(root->right);
             root->right = NULL;
         }
     }
     #+end_src

** #line
   #+begin_src c
   #include <assert.h>
   #define FNAME "test.c"
   int main(void)
   {
   #line 777 FNAME
           assert(2+2 == 5);
   }
   #+end_src

** how to implement #define, lookup table
   1. generate a hash(lookup) table for all keywords to be replaced.
      #+begin_src c
      struct nlist 
      {
          struct nlist *next;
          char *name;
          char *definition;
      };
      #+end_src
   2. iter over all words, hash each and do the lookup in the hash-table, replace text on hit.
      + time complexity: O(n);

** typedef
   + ~typedef int Length;~
   + ~typedef char *String~
     #+begin_src c
     typedef char *String;
     int strcmp(String, String);
     String p;
     p = (String) malloc(10);
     #+end_src
   + typedef a struct
     + [[https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions][typedef-struct vs struct]]
     #+begin_src c
     // original:
     struct tnode *talloc(void)
     {
         return (struct tnode *) malloc(sizeof(struct tnode));
     }

     // typedef:
     typedef struct tnode *Treeptr;
     typedef struct tnode { /* the tree node: */
     char *word;
     int count;
     struct tnode *left;
     struct tnode *right;
     } Treenode;
     
     Treeptr talloc(void)
     {
         return (Treeptr) malloc(sizeof(Treenode));
     }
     #+end_src

   + typedef a function pointer
     #+begin_src c
     typedef void (*myfunc)();
     myfunc f;      // compile equally as  void (*f)();

     typedef int (*PF)(char *, char *);
     PF strcmp, numcmp;

     #+end_src
     
*** why use typedef
    + e.g. for machine-dependent dependent variables, only changing the typedef is enough, without changing the whole program
    + self documented code
     
** unions
   + a single variable that can legitimately hold any of one of several types.
     #+begin_src c
     union u_gat {
         int ival;
         float fval;
         char *sval;
     } u;
     #+end_src

   + With a union, you're only supposed to use one of the elements, because they're all stored at the same spot. This makes it useful when you want to store something that could be one of several types.
   + A struct, on the other hand, has a separate memory location for each of its elements and they all can be used at once.
   [[https://stackoverflow.com/questions/346536/difference-between-a-structure-and-a-union]]
   #+begin_src c
   union foo {
     int a;   // can't use both a and b at once
     char b;
   } foo;
   
   struct bar {
     int a;   // can use both a and b simultaneously
     char b;
   } bar;
   
   union foo x;
   x.a = 3; // OK
   x.b = 'c'; // NO! this affects the value of x.a!
   
   struct bar y;
   y.a = 3; // OK
   y.b = 'c'; // OK
   #+end_src
   
** Bit-fields
   + &=  
   + ^=
   + |=  C|=2 is C=C|2
   + +=
   + -=
   + *=
   + /=
   + %=
   + <<=
   + >>=
     
*** ? bit-fields
    [[./Cp05_BitFields.c]]
    [[https://stackoverflow.com/questions/8564532/colon-in-c-struct-what-does-it-mean][colon in c struct what does it mean]]

    + however the size of the bitfield, it is aligned and stored as the type specified (if int then int no matter the real size of the field)

*** flags (bit mask)
    [[./Cp05_Flags.c]]
    #+begin_src c
    #define KEYWORD 01
    #define EXTRENAL 02
    #define STATIC 04
    // or: 
    enum { KEYWORD = 01, EXTERNAL = 02, STATIC = 04 };
    unsigned int flags;
    flags &= ~(EXTERNAL | STATIC); // flags off
    flags |= EXTERNAL | STATIC;    // flags on
    // if ((flags & (EXTERNAL | STATIC)) // true if both bits are on.
    #+end_src
    

    
//The C++
* S2 makefile
  
** basic
  + see [[./s2_makefile/Makefile][Sample Makefile]]

* FS5 Chapter 0 utilites
** gcc options
   + -g for debugging info. (do not use Og)
   
* FS5 Chapter 1 the basics
  
** two entities defined by the ISO C++ standard:
   + core language features
   + standard library components: implemented by C++
     
** function declaration: legal without an argv name
   + ~double sqrt(double d);~ // d will be ignored in declaration
   + ~double sqrt(double);~
     
** possible to overload
   
** bitwise
   + TODO x^y
     
** variable initialization
   + the curly bracket {} as assignment too
     - double d1 = 2.3;
     - double d1 {2.3};
     - double d1 = {2.3};
     - vector<int> v {1,2,3,4,5,6} // a vector of ints
   
   + the {} assignment is without auto-casting
     + int i1 = 7.8;      // i1 = 7, narrowing conversion are allowed and implicitly applied with "="
     + int i2 {7.8};      //! error: floating-point to integer conversion
     + auto d = 1.2;      // though with auto, no potentially troublesome type conversions
       
** scope and lifetime
   + local scope
   + class scope
   + namespace scope
     - in a namespace outside any function, lambda, class or enum, end till the end of the namespace

** for loop
   #+begin_src cpp
   for (auto x:v)
       cout << x << '\n'
       
   for (auto x:{10,21,32,43,54,65})
       cout << x << '\n'
    
   void increment()
   {
       int v[] = {0,1,2,3,4,5,6,7,8,9};

       for (auto& x : v) // add 1 to each x in v
           ++x;
   }
   #+end_src
   
** pass by reference
   + by ~void sort(vector<double>& v);~ // the vector is not copied.
   + same in: structObj.a = "b" vs. structPtr->a = "b"
     
** declaration notation
   + T a[n]     // T[n]: a is an array of n Ts
   + T* p       // T*: p is a pointer to T
   + T& r       // T&: r is a reference to T
     - ~foo(string const& myname)~
   + T f(A)
     
** reference vs pointer
   + int *ptr = &i;
   + int &ref = i;
     
   + initialization:
     #+begin_src cpp
     int a = 10;

     // pointer init in 1
     int *p = &a;
     // pointer init in 2
     int *p; p = &a; // legal
     
     // with reference
     int &p = a; // legal
     int &p; p = a; //! illegal.

     int& r {a};        // bind r to a (r refers to a)
     r = 7;             // assign to whatever r refers to

     int& r2;           //! error: uninitialized reference
     r2 = 99;           // assign to whatever r2 refers to
     #+end_src

   + reassignment:
     - reassign of reference is not allowed

       
   + TODO

   + example
     #+begin_src cpp
     // pointer
     int x - 2;
     int y = 3;
     int* p = &x;
     int* q = &y;
     p = q;            // p and q both point to y.
     #+end_src

     #+begin_src cpp
     // pointer
     int x - 2;
     int y = 3;
     int& r = x;
     int& q = y;
     r = r2;           // x == 3, y == 3.
     #+end_src
     

   
* FS5 Chapter 2 user-defined types
** struct
   #+begin_src cpp
   struct Vector {
       int sz;
        // number of elements
       double∗ elem; // pointer to elements
   };

   void vector_init(Vector& v, int s) // reference to a struct as input
   {
       v.elem = new double[s]; // allocate an array of s doubles 
       v.sz = s;
   }

   void useVectorInit(int s)
   {
       Vector v;
       vector_init(v,s);

       return //FIXME ?
   }
   #+end_src
   
 ** access through ref vs access through pointer
    #+begin_src cpp
    void f(Vector v, Vector& rv, Vector∗ pv)
    {
        int i1 = v.sz; // access through name
        int i2 = rv.sz; // access through reference
        int i3 = pv−>sz; // access through pointer
    }
    #+end_src
    
** class
   #+begin_src cpp
   class Vector {
   public:
       Vector(int s) :elem{new double[s]}, sz{s} { } // FIXME a list of init
       double& operator[](int i) { return elem[i]; }
       int size() { return sz; }
   private:
       double∗ elem; // pointer to the elements
       int sz;
        // the number of elements
   };

   #+end_src
   
** enum
   + enum // use context namespace
   + enum class // className::enumElm


+ search
+ photo
+ translate
+ ...

+ search

+ maps ,chrome browser && android 
  

  


* FS4 C++ //TODO
Q: return ref to local var
Q: const ref 
structured binding
virtual 
constructor in inheritance
destructor && class
