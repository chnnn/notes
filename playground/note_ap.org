;; -*- mode: org; eval: (company-mode -1); -*-
* L0 Autumn
** p2
   
*** Q3 プログラミング
**** 1
     1. -0.7
     2. 1 * -0.5 + 0 * -0.5 + 0.7 = 0.2 > 0, ans = 1
    
**** 2
     1. BY
     2. X[out][in]
     3. WY[in]
     4. >0   　　　　　　-> (が) 0より大きい
     5. WM[mid][in]
     6. M[out][mid]
     7. WY[mid]         -> 回答が前4問のテーブルにある可能性あり 
*** Q7 組み込み
**** 1
    1. 60000/350 -> 171.4, even is off, the 171 is on.
    2. バンドフィルタ
       
**** 2
    1. 5
    2. a: ON, b: OFF
       
**** 3
    1. c: ONイベント d: 今回値
    2. *カウント値が0に戻ったとき*
       - どんなとき? -> ...とき
    3. *T[N]に65535を加算する*
       - に...を加算する
         
* Notes - p2:
  + The answer of MCQ questions might not present in the text. i.e. Treated as 'common sense'
** programming  
   + アイウエオカキ 空欄埋めの答えは問題文の中にある。例えば、0より、bias BYを入れる。
  



   
* Misc (L03 応用情報技術者合格教本 2021)
** Logical Operator (p21)
   - not(A * B) = not(A) + not(B)
   - not(A + B) = not(A) * not(B)
     
** Information Content (情報量) (p23)
   - ~I = -log_2 P(J)~ bits, where ~P(J)~ is the possibility that the event happens.
   - less I more accurate. Compare with "Maximum average Information Content"

*** Huffman Tree
    
*** Run Length Encoding(ランレングス符号化)
    - 4A0B5C
    - 12, 10, 2... (12 * 1, 10 * 0, 2 * 1...)
      
*** PCM(Pulse Code Modulation)(パルス符号変調), DPCM, ADPCM (p28)
    + 手順:
      1. 標本化, サンプリング周波数(per seconds)(lossless: use > x2 freq of the original analog signal when sampling)
      2. 量子化, 量子化ビット数(info bits to be outputted per sampling)
      3. 符号化, translate info into bits
         

*** Chomsky Hierarchy:
**** Type-3 Finite state automaton (p29) (Regular Language) (正規文法)
    + accepting state (受理状態)
      
**** Type-2 Non-deterministic Pushdown automaton (Context-free Language)(文脈自由文法)
     + Most programming languages are context-free language.
     + *Backus–Naur Form (BNF記法)*
       - ~<> ::= <> | <>~        # ~::=~ "is", ~|~ "or", ~<>~ "Non-terminals"
       - ~<> ::= 0 | 1 | a | b~  #  the '0', '1', 'a', 'b' are "Terminals"
       - examples:
         + ~<postal-address> ::= <name-part> <street-address> <zip-part>~
         + ~<opt-suffix-part> ::= "Sr." | "Jr." | <roman-numeral> | ""~
           

     
**** Type-1 Linear-bounded non-deterministic Turing machine (Context-sensitive Language) (文脈依存文法)
     
**** Type-0 Turing machine (Recursively enumerable Language)

*** Reverse Polish notation (逆ポーランド記法)
    - traverse the tree bottom-up
    - ~X 2 3 * 4 7 * + 5 - =~
    - X=2*3 + 4*7 -5 -> [X, [[[2,3]*, [4,7]*]+, 5-] ]=
    
      
*** Graph Theory
    
**** Hamiltonian graph
     + a graph that has hamilton circuit. i.e. a path that go through all vertex exactly once.
     
**** bipartite graph (二部グラフ)
     + a bipartite graph (or bigraph) is a graph whose vertices can be divided into two disjoint and independent sets and such that every edge connects a vertex in to one in. (wiki)
       
**** adjacency list(隣接リスト)
     
**** adjacency matrix(隣接行列)
     #+begin_quote
     let M = 
     | 0 | 1 | 1 | 0 |
     | 1 | 0 | 1 | 1 |
     | 1 | 1 | 0 | 1 |
     | 0 | 1 | 1 | 0 |
     => M ^ 2 is:
     | 2 | 1 | 1 | 2 |
     | 1 | 3 | 2 | 1 |
     | 1 | 2 | 3 | 1 |
     | 2 | 1 | 1 | 2 |
     (the number of all existing paths, that go through exactly 1 other vertex, between v_i and v_j)
     (p44)
     #+end_quote
     
**** ダイクストラ法(Dijkstra's algorithm) (p45)
     + let the graph: 
       - A -(5)-> C -(2)-> D
       - A -(3)-> B -(1)-> C
       - A -(3)-> B -(5)-> D
         
     + the algorithm:
       1. 3 < 5 -> the '*' vertex is B
       2. recalculate distance connected to the '*' vertex:
          - 3 + 1 < 5 -> del A-(5)-> C
          - 3 + 5 = 8 -> A -(8)-> D, A -(4)-> C -(2)-> D
       3. 4 < 8 -> the '*' vertex is tC
       4. 6 < 8 -> the shortest path is A -(3)-> B -(1)-> C -(2)-> D
          
     + the algorithm in general:
       1. find the nearest vertex, let it be (*)
       2. (re)calculate the distance to all adjacent vertices of (*), discard the inferior path.
       3. loop till the (*) is the goal
          
*** Statistic

**** Bayes' theorem(ベイズの定理)
     + P(B|A) = ( P(A|B) * P(B) ) / ( P(A) )
       
**** Markov process(マルコフ過程)
     + P ^ 2
       
**** Normal distribution
     + CL [+|-] 3 * sigma = [UCL | LCL] Upper/Lower Control Limit
       
**** Correlation Coefficient
     + r = 1, X and Y are strong positive related
     + r = 0, not related
     + r = -1, strong negative related

**** Partial Coefficient(偏相関係数)
     + r_(yx1 . x2 ), the partial coefficient between Y and X1, without the effect of X2
     
**** Spurious correlation(疑似相関)
     + Wiki: In statistics, a spurious relationship or spurious correlation is a mathematical relationship in which two or more events or variables are associated but not causally related, due to either coincidence or the presence of a certain third, unseen factor.
       
**** logistic regression(ロジスティクス回帰分析)
     
*** Derivative
**** Bisection method(二分法)
**** Newton's method(ニュートン法)
     + special considerations
     + time complexity:
       - ~O(log(N)F(N))~ , for N-digit precision, F(N) as the cost of eval(f(x)/f'(x))
       - For N-digit precision, faster than Bisection method, since in Bisection, the cost of N-digit is ~N * eval(f(x))~, while if *automatic(algorithmic) differentiation* is used, Newton's method gives ~(n+1) * eval(f(x))~ where n is the power of x in f(x).
       - [[http://www.cas.mcmaster.ca/~cs777/presentations/AD.pdf][Computational Complexity of Automatic Differentiation]]
         
**** Numerical Integration(数値積分)
     + Simpson's rule
       
*** Matrix
**** Invertible/Nonsingular matrix(正則行列)
     + a matrix of which the *inverse matrix(逆行列)* exists.
     + ~A(A^-1) = (A^-1)A = E~, where E is the corresponding *identity matrix(単位行列)*. Otherwise the matrix provide less information, hence is called 'degenerated'.
       
**** Augmented Matrix (拡大行列)
     + Gaussian elimination(掃き出し法)
       
*** Machine Learning
    + Supervised learning(教師あり学習)
    + Unsupervised learning(教師なし学習)
    + Reinforcement learning(強化学習)
    + Deep learning
      - Deep Neural Network
      - Convolutinoal neural network

** Algorithm && Programming
*** Tree
    + root : height 0
    + complete binary tree (完全2分木)

**** Self-balancing Binary Search Tree
     + AVL tree. Height difference less than 1 on any node.
     + B tree. Multiple children per node. Less rebalancing, good for File System, DB Indexing
     
       
*** Hashing
    + to prevent synonoym(シノニム)
      - open address (how to delete)
      - chaining
        
*** Sorting (Best Case, Worst Case, Memory Space)
    + Heap Sort
    + Quick Sort
    + Redix Sort
    + Merge Sort
      
*** misc
    + XML Style Sheets(XSLT)
    + Synchronized Multimedia Integration Language(SMIL)
      
** Hardware(p120)
   + XOR: not(A) * B + A * not(B) , (A + B) * not(A * B)
   + NAND to AND / OR / NOT:
     - X OR Y = (X NAND X) NAND (Y NAND Y)
     - X AND Y = (X NAND Y) NAND (X NAND Y)
       
   + Resep-Set Flip Flop (RSFF)
     + OR-NOT RSFF
       - S - (OR-NOT) - negative Y
       -       X
       - R - (OR-NOT) - Y(info bit)
         
     + NAND RSFF
       - S - NAND - X(info bit)
       -      X
       - R - NAND - Y

**** FPGA
     + keywords:
       - Hardware Description Language (e.g. VHDL, verilog)
       - system Large-scale-integration
       - SystemC
       - Application Specific Standard product(ASSP): for multiple customers
       - Application Specific Integrated Circuit(ASIC): for a specific company

         
**** LSI power management
     + keywords:
       - Multi VDD
       - Dynamic Voltage Scaling(DVS)
       - Dynamic Voltage and Frequency Scaling(DVFS)
       - *Power gating*
         
**** Data Converter
     
***** Analog to Digital (A/D) converter
      + Angular resolution(分解能)
        - 5V -> 3 bits = 5V/2^3 = (+-0.625V) per bit.
        - 5V -> 8 bits = 5V/2^8 = (+-0.0195V) per bit.
          
***** two's complement (2^n - x), -1 -> 2^n - 1 = 111 when n = 3
      + one's complement flip 0 and 1. Hence it could represent -0.
      + while two's complement has a wider range, from -2^n to 2^n - 1.
      
**** Computer Automation
     + Programable Logic Controller(PLC), Ladder logic (ラダー・ロジック)
     + Feedback Control, PID Controller

**** type of sensors
     + Hall-effect sensor (ホール素子), output voltage proportional to the magnetic field strength through it.
     + Thermistor (サーミスタ), resistance dependent on temperature.
     + strain gauge(ひずみゲージ)

**** misc
     + Actuator(アクチュエータ), convert energy to mechanical motion.
       - Servomotor(サーボモーター)
       - Brushless DC electric motor(DCブラシレスモーター)
       - Stepper motor(ステッピングモーター)
     + Actuator driver circuit(アクチュエータ駆動回路)
       - Pulse Width Modulation(PWM) (パルス幅変調), use *duty cycle (デューティ比)* to regulate the speed of a motor.
         
*** Processor architecture
    + Micro Processing Unit(MPU), integrate the main function of a CPU into a single LSI circuit.
    + *Digital Signal Processor(DSP)*. The goal of a DSP is usually to measure, filter or compress continuous real-world analog signals(wiki).
      - Multiply–accumulate operation (積和演算)の繰り返しを高速に実行でき、必要な信号成分だけを抽出するディジタルフィルタを効率よく実現できる.
      - *discrete cosine transform (DCT)*
    + GPU, handling 3D graphic faster than CPU.
      
**** Complex Instruction Set Computer(CSIC)
     + drawback:
       - less efficiency, as instructions have different clock cycle.

**** Reduced Instruction Set Computer(RSIC)
     + ref: [[https://ja.wikipedia.org/wiki/RISC][RSIC wiki ja]]
     + pipelines
     + load/store architecture(ロード/ストア・アーキテクチャ)

**** wired logic 
     + wired logic -> microprogram (basic)
     + Hardwired control units, in mordern CPU. generally faster than microprogrammed designs (wiki).
       
**** addressing mode(アドレス指定方式)
     + ref: [[https://en.wikipedia.org/wiki/Addressing_mode][Addressing mode, wiki, en]]
     + literal addressing(即値アドレス指定方式)
     + Absolute/direct(直接)
     + Indexed absolute(Effective address = address + contents of specified index register)
       - e.g. static variable, class variables.
     + Base plus index(Effective address = contents of specified base register + contents of specified index register)
       - e.g. elements of an array passed as a parameter
     + Base plus index plus offset(Effective address = offset + contents of specified base register + contents of specified index register)
     + relative addressing
    
**** Big/Little endian
     + Little endian means the lower significant bytes get the lower addresses. Big endian means the other way around. (e.g. Intel CPU might be LE)
       - 0C0D -> LE
         | a + 1 | 0C |
         | a     | 0D |
     + ref: [[https://stackoverflow.com/questions/4560720/why-does-the-stack-address-grow-towards-decreasing-memory-addresses][Why does the stack address grow towards decreasing memory addresses?]]
       
**** EBP, ESP (not percise, cpu architecture dependent)
     + [[https://youtu.be/1S0aBV-Waeo][Buffer Overflow Attack - Computerphile]]
     + [[https://www.youtube.com/watch?v=7ha78yWRDlE][Reverse Polish Notation and The Stack - Computerphile]]

   | 0xfff | kernel       |          |
   |       | ...          |          |
   |       | fcn param #2 | 12(%EBP) |
   |       | fcn param #1 | 8(%EBP)  |
   |       | old %EIP     |          |
   |       | old %EBP     | %EBP     |
   |       | local var #1 | -4(%EBP) |
   |       | local var #2 | -8(%EBP) |
   |       | ...          |          |
   | 0xccc | saved %reg   | %ESP     |

**** pipelining
     + Superscalar processor (スーパースカラー)
     + Very Long Instruction Word (超長命令語)
       
**** parallel computing
     + Single Instruction stream Single Data stream (SISD)
     + Single Instruction stream Multiple Data stream (SIMD)
     + Multiple Instruction stream Single Data stream (MISD)
     + Multiple Instruction stream Multiple Data stream (MIMD)
       
**** multi processor
     + clock
     + Frequency Division (分周)
     + Frequency Multiplication (逓倍、ていばい)
       
*** Memory Architecture
    + SRAM && DRAM (Volatile memory, 揮発性メモリ、きはつせい)
    + SRAM && DRAM (Non-volatile memory, 不揮発性メモリ、ふきはつせい)
      - Electrically Erasable Programmable ROM (EEPROM)
 
        
*** data coherency
    + write through
    + write back
**** cache coherence
    + ref:
      - [[https://en.wikipedia.org/wiki/Cache_coherence][Cache coherence, wiki, en]]
      - [[https://en.wikipedia.org/wiki/Bus_snooping][Bus Snooping, wiki, en]]
      
**** Cache placement policies(キャッシュメモリの割付方式)
     + Direct-mapped cache fill(ダイレクトマッピング方式)
     + Fully associative cache fill(フルアソシアティブ方式)
       - more flexible
       - better hit rate
       - more overhead
       - higher search cost, placement cost
       - more complicated
     + Set-associative cache(セットアソシアティブ方式)
       - a trade-off between direct-mapped cache and fully associative cache.
       - direct map to 'set', then could be placed to anywhere inside the set space.

         
**** io architecture
     + Programmed I/O(PIO)(プログラム制御方式)
       - data - CPU - peripheral device
     + Direct memory access(DMA)(DMA制御方式)
     + Channel I/O
       - A channel program is a sequence of *Channel Command Words (CCWs) (チャネル指令語)* 
         
*** interfaces specifications
    + USB
    + ATA
    + ATAPI
    + SCSI
    + iSCSI
    + IEEE1394
    + HDMI
    + Display Port
    + IrDA
    + Bluetooth
    + ZigBee
    + NFC
    + PCI
    + AGP
    + PCI Express
    + I2C Bus

*** diagram
    + bar(CS)
      - active low.

** System
   
*** distributed processing(分散処理)
    + keywords
      - RPC
      - NFS
      - Hadoop Distributed File System(HDFS)
        
*** Fault tolerance (フォールトトレラントシステム)
    + フェールソフト
    + フェールオーバ・フェールバック
    + フェールセーフ
    + フォールトマスキング
    + フールプルーフ
      
*** reliability related tech
    + RAID
      - RAID 0: data striping.
      - RAID 1: mirroring.
      - RAID 3: RAID0 + parity disk, in bit. Fast read, low write (bottlenecked by the common parity disk).
      - RAID 4: RAID0 + parity disk, in block. Fast read, low write (bottlenecked by the common parity disk).
      - RAID 5: RAID4 + parity block dispersed within all disks.
      - RAID 6: RAID5 + extra parity to prevent 2 disks fail.
      - RAID 01: RAID0 + RAID1
        
    + Network Attached Storage(NAS)

    + Storage Area Network(SAN)
      + Internet Small Computer Systems Interface(iSCSI) 1GB/s, 10GB/s, 40GB/s, SCSI protocol on TCP/IP
      + Fibre Channel Protocol(FCP): 1, 2, 4, 8, 16,..., 128 Gbits/s
        - FC over Ethernet(FCoE)
          
*** Virtualization
    + Thin provisioning (シン プロビジョニング)
    + Hierarchical Storage Management(HSM)(ストレージ自動階層化)
      
**** hypervisor
     + type I: native, bare metal, os - hypervisor - hardware
     + type II: hosted, os - hypervisor - host os - hardware

**** container
     + container - container software - host os - hardware
     + Hence: *No Windows docker on Linux, No Linux docker on Windows without WVM*
       
**** system performance
     + throughput
       - Transaction Per Sec(TPS)
     + ResponseTime
       - end of input -> start of output
     + Turn Around Time(TAT)
       - job start -> end of input -> start of output -> end of output
    
     + 命令ミックス
       - コマーシャルミックス
       - ギブソンミックス
     + Benchmarking
       - SPEC: SPECint, SPECfp
       - TPC: TPC-C, TPC-E, TPC-App, TPC-H

         
**** TODO M/M/1 待ち行列理論 平均待ち時間と平均応答時間 p206
     + p / (1-p) * avgProcessTime, where p is use rate
       
**** TODO M/M/S queuing theory
     

*** System Reliability
    + RASIS
      - Realibility(信頼性)
      - Availability(可用性)
      - Serviceability(保守性)
      - Integrity(保全性)
      - Security(安全性)
    + TODO Mean time between failures (MTBF)
    + Mean time to repair (MTTR)
    + 故障率: 単位時間当たりに故障する確率または回数を表す。 = 1/MTBF
      - TODO, 独立確率? p215???
        
      
** os
   + spooling
   + Program Status Word
   + context switching
   + preemptive os
   + Real Time OS(RTOS)
     
*** Mutual exclusion (排他制御)
    + semaphore(セマフォ) p249
      - バイナリセマフォ, S: 0, 1
      - ゼネラルセマフォ, S: 0 ~ N
      - the P(S) and V(S)
        + P: Probeer (try), S--
        + V: Verhoog (increment), S++

** software
*** language processing
    + compile flow
      - Lexical analysis (字句解析)
        + tokenization
      - syntactic analysis/Parsing (構文解析)
        + regex -> report error if cannot parse
      - Semantic analysis (意味解析)
        + check data type.
        + Generate *middle code*: triple(3つ組), quadruple(4つ組), Reverse Polish notation (逆ポーランド記法)
      - Optimization 最適化
      - code generation (コード生成)

**** linking
    + static linking: include the contents of the file at link time. In other words, the contents of the file are physically inserted into the executable that you will run.
      

*** development tool
    
** Database
   + partial functinoal dependency 部分関数従属
   + full functinoal dependency 完全関数従属
   + transitive dependency 推移的関数従属
   
   + GRANT <ROLE(SELECT, INSERT, UPDATE, DELETE, ALL PRIVILEGES...)> ON <TABLENAME> TO <PRINCIPLE>
   + ACID (atomicity, consistency, isolation(concurrency), durability(per transaction))
     
   + 3相コミットメント制御
     - 2相コミットメント制御 + 各サイトへプリコミット
       
     - 調停者(main site)が(プリコミット)、各サイトにコミット可否を確認でき次第コミットを行う。
       
*** database application
    + data warehouse

** network
   + OSI 7 layers
*** devices
    + physical layer:
      - repeater
      - hub (broadcast to all)
    + data-link layer:
      - bridge
      - L2 switch / switch hub
      - bridge vs switch:
        + the difference
          #+begin_quote
        Bridges can operate only in half duplex mode, but a Switch can operate both in half duplex or full duplex mode. Both Bridge and Switch has one collision domain per port, but switches have one broadcast domain per VLAN. Switchs support full-duplex Local Area Network (LAN) communication.
          #+end_quote
        + Spanning Tree Protocol(STP)
    + network layer:
      - router
        + Routing Information Protocol(RIP)
        + Open Shortest Path First(OSPF) protocol
        + -------
        + Virtual Router Redundancy Protocol(VRRP)
      - L3 switch
        + focus on high speed communication
    + transport layer and above:
      - gateway
        + connect L4 and L4+ layers to the Internet. (e.g. with firewall)
      - L4 switch
        
*** VLAN
    + port base vlan: the port of L2 switch
    + tag vlan: by tagging mac, differentiate vlan with tag.
    + among vlan devices need L3 switch or router to communitcate
      
*** datalink layer control and protocol
    
**** media access control
    + CSMA/CD
    + token passing
    + TDMA
      
**** wireless access control
    + CSMA/CD
    + *RTS/CTS*
    + ------------  
    + FDMA
    + CDMA
      
*** ipv6
    + 32 bits -> 128 bits
    + 8 * 2 * 8 = FFFF:FFFF:0000:0000:0000:0000:0000:FFFF
      
**** address translation
     + Network Address Translation (NAT): public IP -> subnet IP
     + Network Address and Port Translation(NAPT): extended NAT with specified port forwarding. It allows user to map multiple IP addresses to a single IP address.

*** application protocol
**** email
    + SMTP(TCP 25): send
    + POP3(TCP 110): download to computer, then deletes the email from the server
    + IMAP(TCP 143-server, TCP-993 client IMAP over SSL/TLS): store the message on a server, synchronize the message to devices.
      
**** Voice over Internet Protocol VoIP
     + *Session Initiation Protocol (SIP)*: a signaling protocol used for initiating, maintaining, and terminating real-time sessions that include voice, video and messaging applications.
     + *Resource reSerVation Protocol (RSVP)*: a transport layer protocol designed to reserve resources across a network using the integrated services model.

*** data transmission(伝送技術)
**** error control(誤り制御)
     + parity check
     + Cyclic Redundancy Check(CRC): can detect multiple bit flip
       - ref: [[http://chrisballance.com/wp-content/uploads/2015/10/CRC-Primer.html][A PAINLESS GUIDE TO CRC ERROR DETECTION ALGORITHMS]]
       - crc(x XOR y XOR z) = crc(x) XOR crc(y) XOR crc(z)
       - this property leads to the design flaw of the WEP propocol, that both the data and the CRC can be manipulated without knowing the encryption key.
     + Hamming code: parity check on "location groups".
       - p1(row 1, col2, val: 1): parity of 1, 3, 5, 7... (binary ...1)
       - p2(1,3, 0): parity of 2,3, 6,7, 10,11, 14,15... (binary ...1[0|1]$)
       - p3(2,1, 0): parity of (binary ... 1[0|1]{2}$)
       - p4(3,1, 0): parity of (binary ... 1[0|1]{3}$)
       - (15, 11) Hamming code
       | - | 1 | 0 | 1 |
       | 0 | 1 | 0 | 0 |
       | 0 | 1 | 0 | 1 |
       | 1 | 0 | 1 | 1 |
       - position of parity bits on an bit-array of length 256 (2 ** 8 bits):
         + p1: 2 ** 0 = 1
         + p2: 2 ** 1 = 2
         + p3: 2 ** 2 = 4
         + p4: 2 ** 3 = 8
         + ...
         + p8: 2 ** 7 = 128
           
        - extended Hamming code: the loction 0 bit can be used as the parity bit of the whole block, to detect 2 errors.
          
**** synchronize control(同期制御)
     + キャラクタ同期
       #+begin_quote
       ベーシック手順の場合、SYN (ASCIIで 001 0110)を転送文字列の前後に付加することで同期を行う。
       (wiki, ja, 同期方式)
       #+end_quote
     + フラグ同期
       #+begin_quote
文字コードではない一般的なビット列での同期を取るために用いられる。High-Level Data Link Control (HDLC) の場合、0111 1110が伝送ビット列の前後に送出される（これをフラグシーケンスあるいはフラグという）。また、送信時伝送ビット列で*5ビット*以上'1'が連続した場合、フラグとの誤認を防止するため1ビットの'0'が挿入される。受信時には逆に5ビットの'1'が連続した場合、続く'0'を除去する。フラグシーケンスが伝送ブロックの最初と最後の位置を示すので, キャラクタの区切りとは無関係に可変長のデータを送受信することができ, キャラクタ同期よりも伝送効率が良い.
       (wiki, ja, 同期方式)
       #+end_quote
    
**** trassimition control (伝送制御) 
     + High-Level Data Link Control (HDLC) package:
       - Flag(F) (01111110)
       - Address(A)
       - Control(C)
       - DATA (01111110 11111100) => (011111*0*1 011111*0*1 00...)
       - FCS(CRC of F and C and DATA)
       - Flag(F) (01111110)

*** switching(交換方式)
